==========第1个回答===========
高中的时候喜欢踢球，班上有一个特别厉害的前锋，用我们对手的话就是：“挡也挡不住，跑也跑不过，绊都绊不倒”。嗯，我认为的一个“全栈工程师”，不是仅仅能从汇编写到JavaScript，从PHP写到Objective-C。更是从代码到PhotoShop，从产品设计到地推样样行，样样懂。从小了说，给他安排个你自己都没想太明白的任务，他给你一个惊喜。从大了说，就是既能当CTO，又能当COO，没有各种CXO，自己也能当CEO。==============分割线==============说一个我一个朋友@程一仕的故事吧，我是在大三认识他的。当时我是学校论坛的系统管理员，正在招人接替我毕业后在学校的工作。招了好久没有入得了我法眼的，这时我师傅说找到一个不错的。说实话，第一次见面我对他没啥好印象，因为这货抽烟，完全不像是一个搞技术的。后来一起通宵修理服务器，研究技术，慢慢发现这货是个挺有意思的人。以后的日子里我带着他一起写Python，写C，写JS。。。我发现他就是那种能不断给我惊喜的工程师。。。我们工作室的传统是，每年暑假大家都在学校做封闭开发，当时我找了个去IBM实习的机会，想让他替我留校。最后一聊，这货没空，暑假要骑自行车去西藏。。。我才发现他还是个文艺青年（当时还不是那么贬义）后来，他到了大三，去的支付宝实习，做运维开发。再后来跟我一样去了百度，不到三年时间，就升到了T6。。。有一天无意发现这货豆瓣竟然有上万的粉丝，一问才知道，有一天他闲得无聊，写了篇骂豆瓣的产品的帖子，由于字字鞭辟入里，连豆瓣的产品同学都直呼骂得好（抖m的既视感），不断邀请他来豆瓣做产品，直到他亮出T6的身份，对方才作罢。此人还对人文历史政治总有很多见解。每每觉得无聊，第一个想到拉他出来吃吃饭，每次都有新收获。几个月前，他跟我说他前几天被一伙人拉着去融资了，那伙人是想搞云存储的，发现他对分布式存储很有研究，就生生拉上他去壮大阵容。。。我就问，他们怎么知道你对这个有研究呢？这货拿起手中的加冰可乐，33.3°仰望天花板：“因为MooseFS有部分代码是我写的”。后来才知道，这货已经是百度分布式存储&amp;缓存Topic的负责人了。。。。就在我为他要在技术的道路上超越我而惶惶不可终日的时候，有一天，他问我有没有兴趣回成都。。。原来，这段时间他拉着几个学弟搞了个无节操（约XX）的叫“谁有空”的APP（啧啧，这名字。。），拿了几百万的融资，开始出任CEO，走向人生巅峰了。。。他也教会我一件事，遇到比自己厉害的学弟，不要嫉妒，不要尝试去压制，因为“有些鸟注定是不会被关在笼子里的，它们的每一片羽毛都闪耀着自由的光辉”。可能有一天你就要去他公司打工呢。所以，过了这么久，我最喜欢的一个身份还是曾经这个全栈工程师的“师傅”。
==========第2个回答===========
焊过电路板，调试过硬件把弄过各种芯片硬件，写过几行fpga研究过x86, arm, powerpc, mips各种芯片写过几万行的linux驱动，网卡，pci等等都写过精读过linux内核几个模块的代码，写过几个os级别模块写了无数的linux后台程序，各种c, c++, python,ruby, java, erlang, php都写过一些程序用qt写过客户端，写过android app，写过ios app写过windows的程序做过网站，用过ROR，写过简单前端，js, css，html都了解一些弄过机器学习，写过分类聚类，跑过svm。做过通讯系统，做过强电逆变器。看起来够fullstack了吧？很不幸告诉你，如果是这样，那么就会毁掉fullstack这个词。做过强电逆变器，虽然控制电机可以跑起来，但是仅仅停留在跑起来，可以控制速度而已。但是波形还能烂一点不？尼玛电机噪音那个大，主流的逆变器论文看过木有？甚至我怀疑微积分都没学好。做过机器学习，其实说白了，机器学习导论那本书你看完都可以做了，各种贝叶斯聚类分类决策树，高端点的LDA；但是这个仅仅是入门好不，底层的数学原理你足够了解了？能推导公式不？。让你做一个数字识别可以做出来，让你做一个来识别指纹呢？人脸识别呢？别告诉我说有库。其它的等等很多都类似，别被fullstack这个词毁掉了你的一辈子，要知道你做的东西都是别人的入门的时候做的。------------------------------------------------------------------------------------回到问题：如何称为一个fullstack工程师我觉得不要怕dirty job就可以了，一个不熟悉的领域，去找一两本导论级别的书，建立一个基本的知识框架，然后就可以开始干活了；当然，你别指望做的多好；但是绝对不会差到哪里去，知识基本都是相通的；甚至是可以相互借鉴的。当然，如果就拿起某门语言大概看一下语法就开始干活的，我觉得这个不能算。基本每个后端工程师都会写简单的html &amp; css &amp; js吧？-------------------------------------------------------------------------------------关于发展问题：和我一起毕业进入同一个公司（后面跳槽了）的同事，基本都是做深度路线的，很多都混的比我好（大公司核心部门核心岗位，或者在各大公司跳来跳去的）；无论是搞ACM的，还是在某个领域有足够强的积累。他们去面试基本都可以秒杀国内主流互联网公司；但是我呢？做深度不够，做广度他们不需要，而且各大公司都会考虑成熟的技术，所以给的offer相对就没那么有吸引力了（当然，毕业后就没找过工作了，具体也不知道，哈哈）。相反创业公司如果要找合作伙伴，都需要建立一定的信任关系，有些不了解的，让你去你都不敢去；如果是熟悉的团队，那么你只能期待公司发展顺利早点上市，哈哈。自己创业？目前不考虑，这个是一个团队的事情，哪怕两三个人，不是你一个人可以解决的。就算你在fullstack，你也不可能兼顾到所有的事情。-----------------------------------------------------------------------------------------------关于优势考虑问题会全面很多，可以做系统级别的事情，不容易陷入拿着锤子满世界都是钉子的境界。还有，中小创业公司很喜欢这种人。-------------------------------------------------------------------------------------------------对自身发张的考虑1) 知识结构体系化，更扎实一些。2) 技术在某个方向做深。3) 切入某个应用领域，多了解领域知识，解决领域问题。4) 千万别沦落为民科！！！！----------------- 2018.2.8再次更新-----------------------随着管理团队的规模变大，事情变多，对事情有了更多的认识走技术专家路线，是一个很不错的选择，稳扎稳打，各方面压力也不大，一些热门的岗位，会随着需求而身价快速提升但是，如果一个各方面综合能力都很不错的全栈工程师，甚至对业务有不错的理解，那么会有更大的空间，包括管理团队；甚至，这些人就是为了当CEO/CTO准备的。
==========第3个回答===========
看到已经有很多小伙伴分享了成为全栈工程师的答案，小编特在此贡献一篇全栈架构师的内容，以供大伙扩展： 老曹眼中的全栈架构师-博客-云栖社区-阿里云看一下工程师和架构师的区别，简单地，工程师关注的是功能和代码性能，而架构师关注的是业务和系统的性能等非功能性约束。全栈不是全能，只要覆盖了所使用的技术栈就是全栈，例如LNMP，Linux＋Nginx＋Mysql＋PHP。全栈架构师关注的是业务所采纳的全部技术栈，以及技术栈所涉及的系统性能、安全，高可用等诸多因素。全栈（full stack developer）好像起源于facebook中对工程师的一种称谓，全栈架构师估计是老曹的杜撰。全栈的出现大概有4个方面：系统的性能瓶颈定位，团队间的沟通障碍，业务的救火灭火，以及团队的资源紧张。尤其的小型创业团队，战力的有限会导致全栈的产生。和习武一样，我想试图探讨一下全栈的套路，很多能力不是通过当头棒喝产生的。郭大侠需要降龙十八掌，令狐冲以无招胜有招也需要独孤九剑。我觉得全栈的技术栈可以主要分为3个切面：技能，性能 和效率。下面逐一简要阐述：工其事必利其器，环境在效率中是第一位的。具体可看《老曹眼中的开发学习环境》，不在赘述。全栈应该掌握4种编程语言：Java，Objc/C/C++, Python，JavaScript。 语言没有优劣，不同语言有各自的胜场。每个人都不是一个人在战斗，团队敏捷是整体效率的关键。可以使用Trello或worktile之类的工具做协同，以Jinkens等工具支持CI或者CD，了解Scrum中什么是backlog，什么是UserStory，如何控制sprint。同时，敏捷不是以质量的丧失为代价的。再进一步，就是devops了，可以参考《DevOps 全栈必备双刃剑》从下向上看一下 全栈的所需技能，第一个就是操作系统，可参考《老曹眼中的Linux基础》。数据是系统的核心，必须要了解文件系统，对象存储和关系型数据库，只有NoSQL至少要关注redis和mongodb，更多可以可参考《NoSQL与大数据》。网络是一个覆盖更广的领域，至少要了解七层协议模型，DNS，TCP/IP，HTTP，以及网络类型对网络编程的影响，会上只有简单举例，以后择机仔细探讨一下。框架和库使用与所采用的语言是息息相关的，不同语言又有着不同的框架与库，简直是浩如烟海，对框架与库的选择主要从面相领域和面向场景入手，有比较才能有选择。安全是个与非门，没事一切都好，有事就是大事。基本上，可以从传输，网络，代码和数据四个层面掌握有关安全的基础知识。至于架构方法，现在最热的莫过于微服务架构了。服务的划分与业务密切相关，服务独立后要考虑服务的发现和服务间的通信，最后是服务治理，可以从这四个方面专研相关的技术。云服务的出现使得小团队可以做大事情，关于混合云的解释可参考老曹的旧文《理解一下混合云》。 从趋势来看，大数据必将成为工程师团队的重要战力，包括专业知识，数学算法，计算环境三个方面。就计算环境而言，涵盖了Hadoop的生态圈，如果只有一个必备技能，老曹觉得就应该是Spark了，可以参考《架构大数据应用》旧文。 个人以为，性能在诸多非功能性约束中第一重要，直接影响用户体验。首先要从业务和代码层面保障性能，而单元测试是一个必要条件。正像PingCAP CTO 黄东旭所说的，“talk is cheap， show me the tests.&#34;接下来是运行时调优，或者认为是单机性能。从加载和依赖开始，到 JVM调优，再到Linux 内核参数调优。 对于 JVM 调优，给朋友做个广告，中生代技术群中的 江南白衣 （公众号：春天的旁边）有一篇干货文章，特别向大家推荐。数据库是整个系统中的慢性子，关注系统的性能，日志分析比不可少，LEK可能是第一首选。数据访问必须是高可用的，数据连接池的选择和使用都是考验功夫的。 缓存是减少负载，提高系统性的必备技术。可以从客户端，网络侧，服务端三个环节对缓存进行分类，具体可以参考《老曹眼中的缓存技术》。负载均衡同样是一种以空间换时间的技术，具体可参考《老曹眼中的负载均衡》。传输的性能可以依靠消息队列来提升，ZeroMQ可以用在系统内，而ActiveMQ是Java 程序猿的福音，对于高并发和高容错而言，RabbitMQ可能是不错的选择，Kafka是大量数据的传输必备。啰哩啰嗦，只是想探讨一下全栈的套路，也许这本身就是一个伪命题。技术在过去的几十年里进步很快，也将在未来的几十年里发展得更快。今天技术的门槛下降得越来越快，原本需要一个团队做出来的Web应用，现在只需要一两个人就可以了。同时，由于公司组织结构的变迁，也决定了赋予每个人的职责将会越来越多。尽管我们看到工厂化生产带来的优势，但是我们也看到了精益思想带来的变革。正是这种变革让越来越多的专家走向全栈，让组织内部有更好的交流。你还将看到专家和全栈的两种不同的学习模式，以及全栈工程师的未来。技术的革新史从开始的CGI到MVC模式，再到前后端分离的架构模式，都在不断地降低技术的门槛。而这些门槛的降低，已经足以让一两个人来完成大部分的工作了。CGI二十年前的网站以静态的形式出现，这样的网站并不需要太多的人去维护、管理。接着，人们发明了CGI(通用网关接口，英语：Common Gateway Interface)来实现动态的网站。下图是一个早期网站的架构图：　　当时这种网站的URL类似于： https://www.phodal.com/cgi-bin/getblog(PS：这个链接是为了讲解而存在的，并没有真实存在。)用户访问上面的网页的时候就会访问，cgi-bin的路径下对应的getblog脚本。你可以用Shell返回这个网页：123 #!/bin/sh  echo Content-type: text/plain   echo hello,world  Blabla，各种代码混乱地夹杂在一起。不得不说一句：这样的代码在2012年，我也看了有一些。简单地来说，这个时代的代码结构就是这样的：　　这简直就是一场恶梦。不过，在今天好似那些PHP新手也是这样写代码的。好了，这时候我们就可以讨论讨论MVC模式了。MVC架构我有理由相信Martin Fowler的《企业应用架构模式》在当时一定非常受欢迎。代码从上面的耦合状态变成了：　　相似大家也已经对这样的架构很熟悉了，我们就不多解释了。如果你还不是非常了解的话，可以看看这本书后面的部分。后台服务化与前端一致化架构在今天看来，我们可以看到如下图所示的架构：　　后台在不知不觉中已经被服务化了，即只提供API接口和服务。前端在这时已经尽量地和APP端在结合，使得他们可以保持一致。软件开发的核心难题：沟通软件开发在过去的几十年里都是大公司的专利，小公司根本没有足够的能力去做这样的事。在计算机发明后的几十年里，开发软件是大公司才能做得起的。一般的非技术公司无法定制自己的软件系统，只能去购买现有的软件。而随着技术成本的下降，到了今天一般的小公司也可以雇佣一两个人来做同样的事。这样的演进过程还真是有意思：　　在这其中的每一个过程实质上都是为了解决沟通的问题。从瀑布到敏捷是为了解决组织内沟通的问题，从敏捷到精益不仅仅优化了组织内的沟通问题，还强化了与外部的关系。换句话说，精益结合了一部分的互联网思维。瀑布式在最开始的时候，我们预先设计好我们的功能，然后编码，在适当的时候发布我们的软件：　　然而这种开发方式很难应对市场的变化——当我们花费了几年的时间开发出了一个软件，而这个软件是几年前人们才需要的。同时，由于软件开发本身的复杂度的限制，复制的系统在后期需要大量的系统集成工作。这样的集成工作可能要花费上大量的时间——几星期、几个月。　　当人们意识到这个问题的时候，开始改进工作流程。出现了敏捷软件开发，这可以解释为什么产品经理会经常改需求。如果一个功能本身是没必要出现的话，那么为什么要花功夫去开发。但是如果一个功能在设计的初期就没有好好设计，那么改需求也是必然的。敏捷式现有的互联网公司的工作流程和敏捷软件开发在很多部分上是相似的，都有迭代、分析等等的过程：　　但是据我的所知：国内的多数互联网公司是不写测试的、没有Code Review等等。当然，这也不是一篇关于如何实践敏捷的文章。敏捷与瀑布式开发在很大的区别就是：沟通问题。传统的软件开发在调研完毕后就是分析、开发等等。而敏捷开发则会强调这个过程中的沟通问题：　　在整个过程中都不断地强调沟通问题，然而这时还存在一个问题：组织结构本身的问题。这样的组织结构，如下图所示：　　如果市场部门/产品经理没有与研发团队坐一起来分析问题，那么问题就多了。当一个需求在实现的过程中遇到问题，到底是哪个部门的问题？同样的如果我们的研发部门是这样子的结构：　　那么在研发、上线的过程中仍然会遇到各种的沟通问题。现在，让我们回过头来看看大公司的专家与小公司的全栈。大公司的专家与小公司的全栈如果你经常看一些关于全栈和专家的技术文章的时候，你就会发现不同的人在强调不同的方向。大公司的文章喜欢强调成为某个领域的专家，小公司喜欢小而美的团队——全栈工程师。如我们所见的：大公司和小公司都在解决不同类型的问题。大公司要解决性能问题，小公司都活下去需要依赖于近乎全能的人。并且，大公司和小公司都在加班。如果从这种意义上来说，我们可以发现其实大公司是在剥削劳动力。专家我们所见到的那些关于技术人员应该成为专家的文章，多数是已经成为某个技术领域里的专家写的文章。并且我们可以发现很有意思的一点是：他们都是管理者。管理者出于招聘的动机，因此更需要细分领域的专家来帮助他们解决问题。全栈相似的，我们所看到的那些关于成为全栈工程师的文章，多数是初创公司的CTO写的。而这些初创公司的CTO也多数是全栈工程师，他们需要招聘全栈工程师来帮助他们解决问题。两种不同的学习模型而不知你是否也注意到一点：专家们也在强调“一专多长”。因为单纯依靠于一个领域的技术而存在的专家已经很少了，技术专家们不得不依据于公司的需求去开拓不同的领域。毕竟“公司是指全部资本由股东出资构成，以营利为目的而依法设立的一种企业组织形式；”，管理人们假设技术本身是相通的，既然你在技术领域里有相当高的长板，那么进入一个新的技术也不是一件难的事。作为一个技术人员，我们是这个领域中的某个子领域专家。而作为这样一个专家，我们要扩展向另外一个领域的学习也不是一件很难的事。借鉴于我们先前的学习经验，我们可以很快的掌握这个新子域的知识。如我们所见，我们可以很快地补齐图中的短板：　　在近来的探索中发现有一点非常有意思：如果依赖于20/80法则的话，那么成为专家和全栈的学习时间是相当的。在最开始的时候，我们要在我们的全栈工程和专家都在某个技术领域达到80分的水平。那么专家，还需要80%的时间去深入这个技术领域。而全栈工程师，则可以依赖于这80%的时候去开拓四个新的领域：　　尽管理论上是如此，但是专家存在跨领域的学习障碍——套用现有模式。而全栈也存在学习障碍——如何成为专家，但是懂得如何学习新的领域。解决问题的思路：不同的方式有意思的是——成为专家还是成为全栈，取决于人的天性，这也是两种不同的性格决定的。成为管理者还是技术人员看上去就像一种简单的划分，而在技术人员里成为专家还是全栈就是另外一种划分。这取决于人们对于一个问题的思考方式：这件事情是借由外部来解决，还是由内部解决。下面这张图刚好可以表达我的想法：　　而这种思维依据于不同的事情可能会发生一些差异，但是总体上来说是相似的。当遇到一个需要创轮子的问题时，我们就会看到两种不同的方式。对于全栈工程师来说，他们喜欢依赖于外部的思维，用于产生颠覆式思维。如Angular.js这样的框架便是例子，前端结合后端开发语言Java的思维而产生。而专家则依赖于内部的条件，创造出不一样的适应式创新。如之前流行的Backbone框架，适应当时的情况而产生。全栈工程师的未来：无栈全栈工程师本身不应该仅仅局限于前端和后台的开发，而可以尝试去开拓更广泛的领域——因为全栈本身是依赖于工程师本身的学习能力，正是这种优秀的学习能力可以让他们可以接触更广泛的知识。全栈的短板如果你也尝试过面试过全栈工程师，你会怎么去面试他们呢？把你知道的所有的不同领域的问题都拿出来问一遍。是的，这就是那些招聘全栈工程师的公司会问你的问题。人们以为全栈工程师什么都会，这是一个明显的误区——然而要改变这个误区很难。最后，导致的结果是大家觉得全栈工程师的水平也就那样。换句来说，人们根本不知道什么是全栈工程师。在平时的工作里，你的队伍都知道你在不同领域有丰富的知识。而在那些不了解你的人的印象里，就是猜测你什么都会。因此，这就会变成一个骂名，也是一个在目前看来很难改变的问题。在这方面只能尽可能地去了解一些通用的问题，并不能去了解所有的问题。在一次被面试全栈工程师的过程中，有一个面试官准备了几个不同语言（Javascript、Java、Python、Ruby)的问题来问我，我只想说Ciao——意大利语：你好！除了这个问题——人们不了解什么是全栈工程师。还有一个问题，就是刚才我们说的成为专家的老大难问题。无栈让我毫不犹豫地选择当全栈工程师有两个原因：这个世界充满了未解的迷，但是我只想解开我感兴趣的部分。没有探索，哪来的真爱？你都没有探索过世界，你就说这是你最喜欢的领域。当我第一次看到全栈工程师这个名字的时候，我发现我已然是一个全栈工程师。因为我的学习路线比较独特：中小学：编程语言 -&gt; 高中：操作系统、内核、游戏编程 -&gt; 大学： 硬件、Web开发 -&gt; 工作：后端 + 前端而在当时我对SEO非常感兴趣，我发现这分析和Marketing似乎做得还可以。然后便往Growth Hacking发展了：而这就是全栈学习带来的优势，学过的东西多，学习能力就变强。学习能力往上提的同时，你就更容易进入一个新的领域。全栈工程师，英文 Full Stack developer，是指那些掌握多种技能，并能利用多种技能独立完成产品的人。当然，现在「全栈工程师」很吃香，非常吃香！这是因为在移动互联网时代，IT 系统变得愈加复杂，需要拥有全局思维的工程师来搞定各种「疑难杂症」。不仅要玩得转前端，还要搞得定后端，总之各种技术都懂，所以其重要性可见一斑。近日，移动开发精英俱乐部围绕「如何成为一个全栈的工程师？」进行了讨论，主持人是优才学院的创始人伍星老师，让我们一起看看大神们的精彩言论吧！（本文系国内 ITOM 管理领军企业 OneAPM 工程师整理）程序员眼中的「全栈」伍星-优才创始人：全栈，最早来自于 Facebook 的「我们只招全栈工程师」，从表面看是指技术栈，是完成一套产品所面要的全部技术和技能。谷歌在它的书中也提出，它们只招创意型人才，其实这是一致的、相通的！饶培泽：全栈，在我看来是一种态度，无路遇到何种问题都能积极的去解决。全栈，也不是说会什么，而是因为有好奇心与驱动力，所以什么都想搞明白，学习起来自然能快速上手。iOS小码哥：全栈，也可以说「我是一块砖，哪儿需要我，我就往哪儿填。」代表着快速学习的能力和超强的适应能力。梦航：全栈，在一定程度上能更好的做出架构，减少维护成本。卓竞劲：我支持思想和知识层面的「全栈」，而非刻意技能上的全栈。饶培泽：其实，能从前端写到后端的人不少，但是能专职来做吗？这么说吧，很多公司的后端都能写前端，但可不敢让他们写产品级别的代码。如果后端人才如果能去了解前端的知识点，合理去进行整合互补，这样是我们所鼓励的。药交汇：全栈围绕产品服务，重点是考虑问题的角度、广度。个人理解也可以看成责任感的一种体现，前端、后端都可以也不代表全栈。只不过是围绕着问题的解决方案，其根本还是本着对一件事情负责的态度，展开全方面的跟踪。伍星-优才创始人：从谷歌对创意型人才的描述可以看出，这更多体现在能够主动地承担工作和解决问题。比如谷歌讲过一个例子，Adwords 是几个非相关工程师主动解决了小问题带来大收益的。Facebook 的人才培养一开始是不分工的，「新兵营」之后才分工，并且轮岗很多，这中间暗含了：学习能力要相当强，我想学什么，都能学什么，需要我做什么，都能胜任。所以我们对全栈提出如下见解。首先要技术全面，作为全栈工程师，其技术当然要比较全面。从前端到后端、从运维到优化、从 PC 到移动都难不倒。 但又有自己比较精通的一方面。也就是说，作为全栈工程师既要有「专深」，同样也要有「广博」，这样才能在解决问题时不受局限，才能融会贯通。第二就是思维和心态。全栈工程师以积极主动的姿态来面对和解决工作中的问题。以全局的观点来看待自己所从事的项目， 而不只是自己负责的一小部分。以做成产品、做成一件事的观点来看待整个开发流程，而不仅仅是技术实现。 因为只能这样的心态和观点，他才会积极主动地去学习其他技术，用其他技术解决问题第三是上升能力，全栈工程师并不意味着全能，什么都会。但是全栈工程师有良好的基础技能。 这个技能，既包括计算机科学的基础，也包括英语基础，有了这个基础， 加上积极的态度，开放的心胸，就能快速地学习所需要的技术，比如像 Swift 语言，那都不是事儿。 并应用在所需要的开发工作中。第四就是职业价值，像 Facebook 说，他们只喜欢全栈工程师，创业公司也会说，我们需要全栈工程师。无论是在大公司，还是创业公司， 全栈工程师都将成为抢手人才！那是因为，全栈工程师不但技能全面，而且心态积极，学习能力强！伍星-优才创始人：所以全栈不是一种技能，而是一种能力。学习能力，开放心态是优先的！李睿君：其实后面有段时间觉得全栈需要一方面熟悉自己本身专业的领域，另一方面需要关注另一段的技术，这样在需要另一端技术，或是沟通时都能有帮助着建彬：对感兴趣的东西不要当成「工作」来做，其实兴趣才是最大的动力。我觉得全栈应该是由「兴趣」驱动的。伍星-优才创始人：即使是领域专家，他对别的也会有了解和研究的。优秀的技术人员，对所有的技术应该有一种天然的好奇心和折腾劲药交汇：我前端和后端都经历过，其实，在前期人员不全的情况下，结合业务并外出调研梳理了产品线框图、PRD、流程图，到制定了设计规范，到协调资源，然后制定研发周期，最后到输出...... 曾一度以为这就是全栈，但是后来思考，这些只不过是本着对事情负责的态度，才驱动做了很多研发之外的事。就算一个人的技术全栈精通也要服务于根本产品。伍星-优才创始人：项目进度和管理，比全栈本身要难。因为技术还是死的，人是活的，而且多种多样的。就像业务架构师，本身曾经技术应该不错，即使学新技术，应该也是有特殊长处和见解的，不过不学不写罢了。这种人是标准的技术 leader ，技术能力并不一定是以某特定语言的写码能力而界定。一般而言，全栈工程师在产品和沟通这块都有优势，由于技术全面，他能和各方沟通的比较愉快 。甚至和产品经理也沟通好。我也算是一个全栈，此前和各个产品经理沟通都很愉快。因为他不理解的地方，我会和他讲清楚，分析清楚，为什么这个不能做，为什么那样做不好，那样做更好，有理有据，其实，产品经理也是讲道理的，不像我们在网络上经常「吐槽」的那样。如果再加上本身的技术声望和良好沟通的方式，程序员和产品经理相处其实会很和谐的。如果成为一个全栈工程师？程序员：如何成为一个全栈的工程师？-博客-云栖社区-阿里云王威：我的理解是，不仅自己领域的精通，然后其他部分也应该快速学习。在我看来，如果想成为全栈的话，还得靠上项目了。在普通公司的话，一般每个人只关注自己的领域，对跨领域的项目一般不会碰，可以自己利用业余时间来写，比如原本做APP的，有空可以写一下后端的东西，其实开始那一步比较困难。张洋：全栈不只是技术，还需要心态、责任等方方面面。江月：我觉得 facebook 要求全栈，并不是希望程序员技术全面但不精通。而是至少有一个领域精通，而且可以快速研究另外一个领域的技术点。伍星-优才创始人：能成为全栈，意味着技术能达到一定高度，而高度，肯定是以长处见知的。我个人更倾向于认为，一专多能。王威：成为全栈的话，还得靠上项目了。。。在普通公司的话，一般每个人只关注自己的领域，对跨领域的项目一般不会碰，自己私下来写，比如原本做 APP 的，自己私下写后端的东西，其实开始那一步比较困难。药交汇：关键是责任感的转变，由「被动」到「主动」，才能实现自我超越。拯救与逍遥：我个人看法，不是先有了「我要成为全栈」的目标，而是对技术的好奇和追求，以及积极应对当前业务发展的不断挑战，最终才能锻炼出了全栈。薄建业：我觉得，最好的方法就是项目驱动；从另一方面也说明，说为全栈，在一定程度上，也是被逼出来的。王威：我比较赞成项目驱动型。比如 APP 端的，例如做个类似于云笔记的软件，那么后端数据该怎么保存，接口该怎么定，该用哪种语言来实现后端，在分析你想要的目标的时候就能找到该用哪种技术该学哪种技术。比如后端用 PhP 写，这时候就会推动自己去学 PHP，比如自己是做安卓，那么语言衔接上，有可能选择 JAVA 做后端，这时候就学 J2EE 的东西，围绕这个需求来实现，然后学数据库......其实说到底还是得有」目标项目」来进行推动。林曦：后端概念太泛了，不同业务需求和规模需要的技术支撑完全不同。王威：比如做高并发，可以 NodeJs 、 Golang 、 Erlang ，或者干脆用 Java、PHP 等等。其实做项目的第一步，后端写出业务服务接口，在业务量上来之后考虑比如性能优化，比如负载均衡，或者再比如后端架构分层等等。文彦峰：其实，接入也有很多要做的，一般要和终端一起做，路由、负载、流量控制、安全、监控、旁路、优化 TCP 协议栈、内核参数再到硬件的支持等等。做业务，比如网关、鉴权、微服务框架、服务治理、缓存、消息中间件；存储，单机房如何保证数据不丢，多机房是单向同步，双向同步，出了异常怎么通过日志恢复，数据的检查，静态检查点的选择。怎么做分片，怎么扩容不影响原来的分片？王威：所以说到底还是得有这个项目需求，围绕着需求来分析需要的技术，然后再研究技术了。感觉纯按照兴趣来学新的技术，作为对这一个技术有个优缺点简要了解，在需要的时候能快速学习。我个人还是觉得，想成为一个「全栈」，就找一个想法并实现它。周渊：比如，你觉得 NBA 好看，想要做一个 APP 能提醒比赛，那么每天下班后，没事写几个小时代码，三个月后，你就会发现做成了。林曦：我觉得做个「入门型」的全栈比较容易，真正能做到都有一定深入的了解很难，融会贯通更难。拯救与逍遥：先自学基础入门，进阶的话，可以随公司项目，初期不能直接参与，但是我们可以主动思考技术方案，然后参照其他同事最后落地的方案，对比总结。能力慢慢提升，真正上手的机会总会有的！周渊：最重要就是，Just Do It ！林曦：不过大公司相对有一个好处，就是能遇到「牛人」的概率也比较高，所以开发过程中，某一个部分遇到瓶颈的时候想要找人讨论或者请教，找他们也是比较好找的。周渊：高人点拨，确实重要，但是建立在你入门的基础上。拯救与逍遥：很多时候，我们不能做最想做的事情，而且要停下来推动一下，阻碍我们继续前行的事情。但是，有些坑，有些历练是必须的，别人说一万遍，我们还是得自己历练。而且很多技术选型，都是在真正落地之后，才暴露出问题。王威：采坑是必然的！运气好的话，采坑的代价低，运气不好的话，采坑代价可能毁掉整个项目。不过有些坑，有可能是在技术选型的时候就会暗含的，这个时候确实不好找。王威：我们业务在往图数据迁移的时候也踩了很多坑，因为我们是社交软件，所以很多需求是基于用户关系的，比如喜欢、不喜欢、好友等等。。。最开始觉得 neo4j 挺方便的，导入数据的时候发现，免费版就是个坑爹的玩具。。。收费版貌似5千刀一个月还说多少，巨贵。。。王威：创业有这个好处就是人少，一个人当多个人用，这个时候就有很多机会去摸新的东西，不过缺点就是没人带，自己摸石头采坑。。。王威：不过对于我来说收益大于采坑风险。。。所以还是得围绕这个需求，一圈一圈的挖掘更好的解决方式，这个是一种学习的过程。尤其是在风险可控范围内，绝对鼓励大家尝试新的东西。到最后你的选择很多时候依赖你团队的水平，怎么把这些人水平带起来，你这些才能做细最好的成长就是在业务中成长林曦：架构也是活的，需要不断生长，不断修改。不过，前期埋的坑也只有后期加班吞了，没有一劳永逸的架构！董飞：我觉得重要的还是分享，别人帮你填了坑，你也可以帮别人填坑。而媒介就是博客，大家可以互帮互助。王威：说到写博客，我觉得可以把思维给规范化，把想法记录下来的同时还能注意到以前没注意到得细节，绝对是学习新姿势最必要的补充。伍星-优才创始人：曾经，我就主动地提出来帮公司承担一些的运维方面的事情。然后就自己学习，请教，后来很自然地就成为全栈了。当然，全栈并不意味着上班学别的，我们上班时间把公司的事情做好，这才是成为全栈的前提。伍星-优才创始人：还有一点，就是我们在写代码的过程中，要考虑怎么优化，怎么写得更快更好，而不是像「搬砖」似的，简单的重复。「搬砖」工作很快就会被淘汰掉，积累核心竞争力才是发展的根本 。王威：比如做APP，在写从服务端拉取数据的时候，就可以考虑一下他们为什么要提供这样的数据结构？这样的接口如何进行实现的？有这些疑问的时候，就会促进自己去看看去了解一下相关的知识，这样才能不断通向全栈之路。当然，完成是一码事儿，完成好是另一码事儿。全栈的意义不是全都泛泛地去做，而是在做深自己的领域同时，也能借鉴其他的技术，至少在团队开发时候沟通成本会减少很多。赵建彬：其实，产品并不会关心你代码怎么写，关键自己要写出让自己觉得满意的、高质量的代码。薄建业：全站人才可以站在更高的视角，提供「一揽子」的解决方案，避免踩深坑！文彦峰：热衷于技术，成全栈是早晚的事儿，技术全面某方面又比较深入，自然能解决别人解决不了的问题，能做别人做不了的事情，团队中的影响力，行业中的影响力，也自然就有了，形成正向循环，还是挺不错的！伍星-优才创始人：就像罗辑思维跨年公开课说的那样，核心竞争力，就是你的不可替代性。我们不能单纯地说「全栈」好，很多初学者会被误导，是因为他们不了解什么是全栈，怎么才能成为全栈。就像武功也有练「走火入魔」的。其实，加入一个快速成长的团队创业。是成为全栈的最快捷途径。这个团队，也可能是大公司内部创业团队。也可能是大家都把工作当作创业的团队。而没有好奇心，没有折腾劲，没有学习能力，没有开放心态，是不可能成为全栈的！http://quanzhan.ucai.cn/intro （本文是优才学院创始人伍星对全栈的理解，发布后2014年4月份，到现在也没有改变，欢迎大家阅读。）
==========第4个回答===========
折腾之魂永不停息的人，最后就容易变成 full stack.另外，在学校里写东西，找人巨难，这造就了一批 full stack 小伙伴. 有一次搞一个 html5 的比赛，到后来快要deadline时，前端明显要搞不完了，作为一个野生前端，怒刷了一天 js 后开始填坑.有时候因为找不着人，还可以临时变身美攻（当然你也可以叫设计湿），然后客串一下 ios 客户端开发，设计个数据库…… 最后小伙伴们所有东西都搞完，你再从头到尾把他们搞的东西擦一遍屁股，然后需要宣传/比赛的话，海报/视频/演讲/slides/文档都是你的事，最后就成了 full stack 了.你看，full stack 都是苦逼的人（你看这还只是学校里的 full stack，要是工作上成了 full stack 那就不定啥样了）. 想想好像没必要匿…，就不匿了吧.
==========第5个回答===========
Full Stack Developer 在国内不被接受的一个主要原因是公司缺乏稳定的 T 线（技术职位晋升路线）。太多有才华的人写了几年代码最后都去做了管理。而今天的网络相关技术，聪明又能持续学习的人，在三年之内可以在一个领域做到很高的水准。那么如果你做五年，十年甚至十五年呢？我以为你成为 Full Stack Developer  是很自然的选择，而且可以跟随最顶尖的技术。这种人并不罕见，我认识的人中  @徐 乐乐 就是个例子。相信 Full Stack Developer 的核心并非否定团队和协作，而是更多的体现在架构设计，快速原型和 TroubleShooting 方面。随着今天的分层越来越清晰，平台和语言越来越有特点，更加全面的技术人员可以根据不同的语言搭建整个架构。数据一致性要求高？那么使用事务管理久经考验的 Spring？还要考虑 scale ？那么放在 Oracle 里面做还是放在 Application Server 的 Transaction 管理里面做？简单请求的高并发？那么 Node.js 也许不错。 Web App 快速原型，那么 Rails 也许不错。邮件模板和自动发送？ PHP 有现成的东西为什么不用？前端数据和交互复杂？ 为什么不试试 emberjs （ PS ：选前端框架对于架构人员来说简直像女人逛银座一样令人兴奋。甚至有人用几乎所有的框架写了同样的 Web App 来供他们试用： TodoMVC）？想绕过苹果的 App Store 的审查机制频繁发布？可以考虑在 iOS Apps 里面嵌入 HTML5 。Full Stack Developer 在快速原型上也很有优势，因为省去了大量的管理和沟通成本。而且，这并非就意味着一定在代码质量或者测试上有缩水。 MVC 前后都可以用。一个写过 test_helper.rb 的人做前端，一定会搜索 javascript TTD 。同样，用过 javascipt lint 的人一定可以找到 stylecheck 。语言和平台会变化，聪明的方法和工具都是共通的。懂得基本的字体知识和排版审美难道和 CSS 不是天生一对？TroubleShooting 方面 Full Stack Developer 同样优势巨大。服务器压力太大未必需要通过后端解决，优化个 SQL 写个 Hint 是选择，而拿一部分数据和运算到前端也许是更加合理和低成本的选择。一个系统运行多年，最后遗留的问题很可能需要对业务和技术都有深入理解的人才能解决。从以上内容可以看出， Full Stack Developer 并非杂而全 - Facebook 也不会雇庸手。他要求的是一种更加全面的深入。 一方面，他是技术人员不断学习的结果。另一方面，他也是对自己事业的一种责任：技术人员的价值不是指派做了一半的 issue 给队友，而是更快更好的搞定事情。
==========第1个回答===========
《荀子·劝学》：“螣蛇无足而飞，梧鼠五技而穷。” 杨倞 注：“五技谓能飞不能上屋，能缘不能穷木，能游不能渡谷，能穴不能掩身，能走不能先人。”
==========第2个回答===========
用不了一年，一天就够。我第一次写网站的时候，用PHPMYADMIN操作了数据库，表建起来了，用WINAMP架设起来服务器，用PHP写了SELECT，然后传到网页前端，document.write()出来，居然成功了。我深深地为自己自豪，只要做Web开发基本就自动全栈了。欺负中文很容易，不能名副其实，就改动词语意义，听起来都一样，“全栈”，“大神”，“牛人” ... 本质上很不一样。
==========第3个回答===========
先举两个例子你们感受下，其实都是一回事。就是知乎上一些书呆子对于外行人的歧视：A：我要一天学会跑步B：就你那鸟样，还学会跑步？重心能放放平就不错了。A：我要一天学会牛顿定律B：就你那鸟样，还学物理？微积分学了吗？数学工具会用吗？A：我要一秒钟背诵一个单词B：你背的是apple吧？哈哈哈哈哈，你这种人也就背背apple的份了这样真的不好，其实有C照就可以上路了，为什么你们一定要嘲笑那些不会开F1的呢……---------------------------------------------------------------------------------------------------------------------------本来不想回答这个问题的。但是看了一下其他答案，都在嘲讽这个我不知道他是谁的人。觉得有些话想说。软件开发的确是一门相对门槛没有那么低的技术，知乎上无数牛人，都是很厉害的。但实际上，门槛没有那么低，不代表别人就跨不过来了。花一年时间，跨这样一个门槛，我觉得可能是够的。知乎一直是一个书呆子聚集的地方。无数的政治正确宣扬着诸如努力无敌教，科学万岁教，数理王道教等等神奇的教派。其下教徒无数，狂信徒不知凡几。计算机牛人教当然也不甘落后，纷纷要表达一个什么观点呢？就是自己所拥有的知识，所掌握的技术，你们这些外行懂个JB。我花了十年才走到今天这个地步，你一年就想成为全栈工程师？哈哈哈，让老子先笑一会儿。大概就是这群书呆子脑子里的化学反应了。但实际上，我，作为一个老程序员，给外行说一句吧。实际上不光是对外行说的：行业保护这种东西，歧视门外汉这种东西，我们行内人玩玩就可以了。哪个行业都有欺负新人保护老人的自发行为，哪个行业都有瞧不起竞争对手保护自己饭碗的竞争行为。这不稀奇。但是，要把技术壁垒拿出来当金牌把自己包起来，天天研究回的四种写法还觉得自己天下无敌，那是要死人的。我尊重大牛，我尊重开源大神。但是，这个世界上不是只有这一条路的。全栈工程师就一定要什么都懂？什么都会？这个不懂，那个不会，就你行你上呀，不行别哔哔？写个简单点的网站，弄个简单点的数据库，就不是工程师了？你们工程师也太清高了。也许在知乎这种书呆子满地爬的地方，这样的价值观容易被宣扬。但实际上呢？现实生活当中，程序员不过是最最最最最基本的乙方。和大多数技术工种一样，不过是待遇好一点的奴隶罢了。把自己抬得那么高，也不怕摔死？要成为一个比较合格的全栈工程师，真没那么难。随便掌握一点技术，开发一些简单的网站，游戏，互联网应用，真的是太简单了。现在各种半成品框架满地跑，拿来一用，分分钟就是个产品。然后，你们去歧视它们笨？歧视它们不懂技术？歧视它们这不会那不行这不深入那不了解？呵呵，跑得快一点的奴隶终于也翻身开始欺负跑得慢的奴隶了吧。你们当然是可以这样的，就想你如果真的会回的四种写法，歧视别人不会当然是没问题的。但是最终，时代是在进步的，并且不是以个人意志来主导的进步的。你曾经以为很高的门槛，可能在某个东西开源以后，也就是拿来ctrl+c, ctrl+v的命。就好像当年车间工人引以为豪的装配技术，现在多少被机器人代替了？当初有个问题说软件开发什么时候会被人工智能取代，我开了个玩笑说：等哪天机器人自己会写代码的时候，就是一个新物种出现的时候。这几乎不可能的。但是，这个世界有绝对不可能的事情吗？呵呵。这样说吧，我跳槽经历算多了，那么多公司待下来，那么多赚得比我多干得比我少的领导当中，技术比我好的有几个？不全他吗都是“一年就会的全栈工程师”？有的甚至连hello world都不会。但是，我有资格嘲笑他们吗？你当然可以吃不到葡萄酸他们一下，然并卵。很久以前，我刚毕业的时候，在群硕软件遇到一个人。这个人当时三十多。在开鸡血大会的时候，给我讲了个故事。故事里说，他有个同学，你们懂的，同学嘛。连if-else都不会写。当年找工作，在北京一栋小楼里面，找了个打杂的工作。当时，那个办公室里一共才十个人不到。后来才听说，这家公司叫百度。讲故事的时候，资产9位数。我们不去考虑这个故事是真的假的，实际上就是假的吧。我们要去考虑的是什么？你那些引以为傲的技术，就真的那么“高贵”吗？显然不是啊，你的技术，只是让你更好的当一个奴隶罢了。你要翻身作主人，得靠点其他的。是，我理解书呆子看到别人不尊重知识的时候，就仿佛有人在否定他的人生的那种感觉。但是，人家为什么要尊重你的知识？你一没有给他钱，二没有给他帮助，三，有特么相关知识的人如过江之鲫，你不干自然有人干。那些一年就成为全栈工程师的人，说不定第二年就混成中层高层开始领导你用你的技术去干活了。让你加班你加班，让你重构你重构，你身怀绝技，又有什么蛋用呢？当然我不是说技术是没什么用的东西。技术很有用，高端技术很稀缺。但是，又能怎么样？在别人看来，你日日夜夜思考出来的新的解决方案，还不是回的四种写法？你的价值想要获得承认，还不是要去找很多土财主暴发户？自古以来，书生都是最傻逼的就是这里了，因为他们真的以为，知识就是力量。而实际上，知识只是知识，力量还是力量。知识虽然可以变成力量，但是它不会自己去变。你所追捧的那些东西，根本没那么高贵。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假於物也。那些你顶礼膜拜的技术，知识，技巧，在别人眼里，不过是跑得快，游得快这样的技能罢了“知识分子的优越感”，真是一种让人恶心的东西。因为他们不但和“中产阶级的优越感”一样让人不舒服，还没有中产阶级优越感的基础力量。如果说中产阶级优越感是有资产作为基础的半杯水晃荡，那么知识分子优越感就是拿个竹篮子在那里晃。连杯子怎么弄，都不一定全想明白了啊。
==========第4个回答===========
一直用全栈的技术栈去要求自己，做了四五年了，技术栈也拓展过几个端，目前当听到别人一说你是全栈工程师的时候，内心觉得好不是滋味，因为在好多人眼里现在的全栈也是个“啥都会，啥都不精”的代名词。真正的全栈，没有个十年八载是很难发挥全栈的价值的。而且全栈的界定非常模糊，没有一个标准的…所以本身李笑来这个说法就是个伪命题。但我觉得他这么说的一个原因是因为当下技术圈子好浮躁，大部分人都是直接从入门到放弃了，但凡用点心还是可以轻松的进入一个新的技术栈的进阶阶段的。按传统全栈来看成长的过程是一个经验的积淀，是一个没有捷径的过程，全栈的界定又不那么清晰，我们不妨按照自己的想法去界定下全栈，我认为的全栈是一个T型发展的路线，首先你要有一个专长深入的横向领域，其次再去做纵深的拓展，这个过程主次分明不会让你产生眉毛胡子一把抓的迷惑…
==========第5个回答===========
我是个做Android的，用几天二次开发了一个node.js开源项目，集成了MongoDB，又搭了个flask服务器，Python爬虫爬了些东西放里面。又写了个很丑的前端做后台管理界面，app勉强能跑了。其实也就是个学校的大作业。那一年速成的全栈也就我这大作业水平吧。
==========第1个回答===========
相对于同事， 我算的上的全栈了， 我招黑的机率得确要比其他同事大的多。先说下技术背景.net， 有过2年专门的.net经验， 网站和windows客户端的， 懂C#、F#、CLRphp， 项目经验无数java，用spring做过几个项目， 研究过tomcat源码，懂点JVM，周志明的《深入理解JVM》读的滚瓜烂熟JavaScript，曾在这个上面花过大量时间，能不利用引擎徒手写出网页小游戏。 钟爱TypeScriptNodejs，会Js和其它的服务器端语言，会nodejs自然就不奇怪了golang，写过几个服务器程序android，工作之外开发过几个小项目此外， 一些编程方面的通用技术掌握的不错，包括面向对象、数据结构与算法、计算机网络、编译原理等。 当然我掌握的程度和轮子哥这样的大神们还差十万八千里。然而， 我们公司写代码的除我之外， 全是PHP程序员。用visual studio和c#写程序不管是开发环境还是语言都完胜phpstorm和php这个是众所周知的， 但当我向同事们推荐.net技术时， 完全被当成外星人来看，他们的理解是现在互联网行业技术领域都是被Java和统制的，用.net可能连份像样的工作也找不到， 花这个时间去学习.net还不如多打几盘撸啊撸。至于.net平台在技术优势， 没用过的人是完全体会不到的。因此， 每次向同事提到.net时，都会招到白眼。我们的一些php程序在用户访问的高峰期也会出现性能问题， 且一直无法解决，程序定时抽风。 我向大家推荐尝试使用golang重写一些高并发模块时，几乎得不到认同， 吐槽声倒是不断。 领导认为， 公司所有项目都是php的，使用golang会增加员工学习成本，降低工作效率， 也会使整个技术架构不一致。  同事们则认为， golang性能的却突出， 或许是能解决问题， 但是php的性能也不差， 人家微博用的也不是php吗， 只是我们没有找到窍门而已（php是世界上最好的语言），至于golang的其它优势， 一概忽略。我向前端同事推荐TypeScript，静态类型和DefinitelyTyped可以提高代码可维护性和编程体验，前端同事茫然的向我眨巴眨巴眼睛（我知道， 他们大多数可能连静态类型是什么都不清楚）说：我现在在学习xxx框架， 你说的这个以后我抽空去了解下。 然后我就知道我又在白费口舌了。我跟同事说，学一些面向对象和设计模式对写代码有好处时， 他们会说：又不是写Java，用什么面向对象和设计模式，php中从来没有这些。 好像面向对象和设计模式是Java专属似的。我跟同事说使用数据库索引最好先了解b tree数据结构时， 他们会说：卧槽，这么高端。心里却在想：装什么B，就你专业，老子用create index就足够解决问题了。我自己有时候在写代码解决复杂问题时， 明明有更好的方案可以用， 但偏偏被php约束的死死的，怎么都施展不开。 给我的感觉就像眼睁睁的看着一台iphone 7 plus放在眼前，编编只能用山寨的安卓机， 要多难受有多难受。在团队中我显的那么另类，同事对我也会有一些玩味的吐槽。 某些时候同事维护我的代码时， 偶尔就会蹦出一句“你的代码我不敢动呀， 怕碰坏了你的设计模式” 。还有如“听说你要去和妹子约会， 跟她聊聊.net的好吧”,这样的情景不胜枚举， 有时候真的另人哭笑不得。年轻的时候埋头钻研技术，到后来才明白， 技术嘛， 够用就行， 在一个岗位上，最重要的解决问题和把事情做好的能力，技术什么的真不是最重要的。我们领导动动嘴巴就能让我做事， 然而，论写代码他的战斗力乘以十都不一定是我对手。 而且， 软件开发讲究的是团队合作， 要做全栈特立独行使用别人不会的技术， 那就是跟人过不去，砸人家饭碗， 那些非全栈的工程师能让你好受么，不黑你才怪。当然， 全栈也有全栈的好， 技术面广意味着在技术层面解决问题的能力相对较强， 技术在程序员这个职业中还是占着非常重要的位置的。只要不仗着自己技术牛B，不把人放在眼里， 乱搞破坏， 同事们也会服你， 领导会欣赏你， 升职加薪这种事情也会来的容易些。
==========第2个回答===========
有四种人：在自己的专业领域达到60分，别的几乎一点都不懂也没兴趣涉猎。(这种人约占50%)在自己的专业领域达到60-70分，同时也有兴趣花时间涉猎别的领域，可以有20-60分的样子。(这种人约占 30%)在自己的专业领域达到80-99分，同时别的领域 0-30分不等. (这种人约占10%)在自己的专业领域达到80-99分，同时别的领域 20-80分不等. (这种人约占10%)3、4因为专业领域的主角光芒太耀眼，在别的领域的造诣往往会被忽略。 （就好比一个优秀的程序员也可能还是个做菜很好吃的厨子、一个拥有6块腹肌的健身达人，但是大家往往会忽略其厨子属性和腹肌属性）我不理解的是， 明明很多人只达到了1，却有脸说2&#34;什么都懂，什么都不精&#34;. 你摸摸自己的良心, 你确定自己真的达到3了? 有资格鄙视2了?  
==========第3个回答===========
全栈程序员是一件很坑爹的事情。我分享一下自己的全栈经历吧。自己一开始是做游戏的，后来做游戏引擎涉及到了游戏脚本语言的实现，后来转到C++编译器相关的开发项目开发。在编译器领域稳定了四年左右，因为各种各样的原因噩梦就开始了。。。除了现在最常规的移动开发（三端），和B/S的开发的各种技术，粗略数下做过的相关领域包括：图像算法、视频算法，微信小游戏，存储，VM，Matlab二次开发，HiL台架二次开发，QT，C#，数据挖掘，使用各种你能叫出名字的脚本开发各种工具等等。。。但是就像其他答案里所说的，一个人会这么多东西所带来的潜台词就是每一样都不是很精通。因为自己学东西比别人快一点，所以各种被调去救火。往往一个领域刚刚有点心得，就奔赴了另一个战场。其实这个对一个人的职业规划是相当不利的，没有人知道你到底是干什么的。就算你和别人说你什么都能做，也不会有人相信你。来面试的都会吹牛什么都能做。加上年纪大了，记忆力不好，一段时间不用的技术就会淡忘，更加印证了吹牛逼这件事。好吧，其实这还不算坑爹的，你们说的全栈只是小全栈。啥叫小全栈呢，就是学来学去，切来切去，都是码农。我还做过项目经理，产品经理，日语翻译，技术支持，产品运营和销售。好吧，这还不算坑爹。因为技术人员做久了，转去做管理或者产品之类的都很正常。我经常是几个角色反复轮着来，并且同时来，反正缺什么职位我就上。比如现在，我身兼码农+项目经理+销售。项目经理和销售是一对有点相反的角色，在客户那边，销售一般是拍着胸脯我什么都能做，什么都没问题。项目经理往往是，这个那个我做不了，要砍掉。所以有时候感觉都要人格分裂了。曾经在另外一个答案写过编译器相关开发的职业路径的困惑。在国内从事 C/C++ 编译器的开发有发展前景吗？ - Zenzen 的回答但是其实像我现在这样各种角色切换的全栈更让人迷茫，自己出路在哪里真的不知道。所以真心建议大家：集中精力钻研一项技术，并且钻透。
==========第4个回答===========
技术栈全面一些，在沟通上是有益的。团队内总不能把合作者当黑盒，后端同学了解前端的工作方式，前端同学了解后端的工作方式，团队内的合作可以更紧密、沟通更高效。合作的力量远大于个人单挑前后端，出来打仗，对单兵作战能力过于沾沾自喜的话，就显得不合时宜了。不过对个人而言，仍不要拒斥做一个 &#34;全栈&#34;。出来干到底是为了解决问题，但问题本身会变化。如果把自己定位成某个领域的专家，那么这个领域成熟到不需要人力时要怎样过？解决已知领域问题人会越来越不如机器，但人胜在灵活，能适应未知的问题，这时全面的视野要好过抱残守缺。开枪胜过剑技就开枪，撒味精胜过煲高汤就撒味精。
==========第5个回答===========
所谓全栈就是项目刚起步的时候拉你过来做demo如果做起来了：高薪招几个专家把你踢掉如果没做起来：继续做下一个demo所以，你的优势是？比前期雇几个专家便宜得多你的不可替代性是？吃苦耐劳？所以你的回报呢？呵呵
==========第1个回答===========
1、什么是全栈工程师全栈工程师就像一位多才多艺的艺术家，在画布的两面绘画，每一面都代表软件应用程序的不同方面。从本质上讲，全栈工程师是精通处理前端（Web 应用程序的可见部分）和后端（服务器、数据库和应用程序基础设施）的开发人员。这也是全栈工程师需要具备的最主要的技术栈。然而“全栈”一词虽然在传统意义上指的是同时从事前端和后端工作的人，但科技行业不断发展的性质为全栈添加了更多要求。包括处理云服务、DevOps任务，甚至了解 UI/UX 原则。全栈工程师的目标是拥有软件开发过程的整体视图。需要注意的是，成为一名全栈工程师并不一定意味着掌握这些环节中的每一项技术或工具。相反，全栈工程师需要对每个领域的有足够的理解能力，制定跨越整个 Web 应用程序的解决方案。根据我的经验，每个全栈工程师无一例外都有自己喜欢的工作领域。即使他们花时间掌握了许多（甚至所有）领域，每个人也会发现其中的一个领域比其他领域更有价值或令他们能够获得更多的成就感。2、全栈开发的演变要真正了解全栈工程师的本质和意义，就要追溯这个角色的演变轨迹。全栈开发虽然在当代被广泛定义和采用，但它本质上还是植根于软件开发历史中的角色。在数字时代的初期，软件开发中的专业角色概念几乎不存在。开发人员经常身兼数职——设计界面、编写代码和管理数据。从本质上讲，他们是最初的全栈开发人员。这种整体方法主要是由于应用程序的简单性和有限的技术堆栈。然而随着技术的发展和网络变得越来越复杂，软件开发的复杂性也随之增加。开发人员开始缩小关注范围，形成前端开发人员、后端开发人员、数据库管理员等不同的角色。这个时代标志着任务和责任的细分，强调特定领域的深度而非广度。2010 年左右，转变开始出现。工具、框架和平台的快速扩散与敏捷方法相结合，为全栈开发的复兴铺平了道路。尤其是初创企业，希望开发人员能够快速构建原型并在整个应用程序堆栈中进行迭代。这导致了全栈的复兴——全栈工程师能够制定端到端解决方案、简化开发流程并加速产品上线。如今，全栈开发不再只是一个流行词，而是一套有形的、有价值的技能。借助云技术、微服务、laC以及不断发展的技术环境，现代全栈开发人员不再关注掌握每项技术，而是更多地关注适应性、解决问题和理解各种组件的相互作用。它是关于在前端和后端、数据和界面、设计和逻辑之间建立桥梁。3、全栈的优势和劣势 一头扎进全栈开发的广阔世界既令人兴奋又令人畏惧。就像任何职业选择一样，全栈也有着自身的优势和挑战。优势方面，全栈开发人员既可以创建时尚、交互式的前端，也可以构建强大、高效的后端。这种双重专业知识使他们能为许多团队提供帮助，特别是在更需要多功能角色的初创公司或小型公司中。其次，凭借整体经验，全栈开发人员可以可视化项目的完整生命周期。这种整体视角有助于做出有利于项目的明智决策。与此同时，全栈开发人员通常拥有更广泛的工作机会。无论是深入研究后端解决方案还是制作更完美的用户界面，他们的技能都非常丰富，对各种雇主都有吸引力。最后，掌握整个 Web 应用程序结构通常意味着全栈开发人员可以更有效地解决问题。全栈开发的不同需求也能够促进开发者持续学习，使角色能够保持一种长期的进步状态。劣势方面，随着技术工具和框架的快速发展，有时全栈所需知识的广度可能会以牺牲某一领域的深度为代价。虽然全栈开发人员在各个领域都有技能，但他们很难具备专业开发人员在特定领域的深厚专业知识，对于需要特定领域深厚技术实力的项目来说，这会是一个限制。而雇主或团队成员有时可能会有不切实际的期望，假设全栈开发人员可以无缝处理他们遇到的任何任务，从而导致潜在的偏差。在整个堆栈中兼顾职责也可能会导致工作时间延长和工作量增加，如果不加以管理，可能会导致更快的倦怠。此外，持续为前端和后端解决方案做出选择可能会导致决策疲劳，随着时间的推移会影响选择的质量。4、开发者的全栈开发平台目前低代码在技术领域很活跃！JNPF快速开发平台是一款基于SpringBoot+Vue3的全栈开发平台，采用微服务、前后端分离架构，基于可视化流程建模、表单建模、报表建模工具，快速构建业务应用，平台即可本地化部署，也支持K8S部署。用JNPF搭建应用，你只需要关注业务本身。数据存储、运行环境、服务器、网络安全等，平台为你全部搞定。应用体验地址：https://www.jnpfsoft.com/?zhihu引擎式软件快速开发模式，配置了图表引擎、接口引擎、门户引擎、组织用户引擎等可视化功能引擎，基本实现页面UI的可视化搭建。内置有百种功能控件及使用模板，使得在拖拉拽的简单操作下，也能大限度满足用户个性化需求。由于JNPF平台的功能比较完善，本文选择这项工具进行展开，使你更加直观看到低代码的优势。5、全栈适合你吗决定全栈途径是否适合您的职业生涯不仅仅是权衡利弊，还需要反思、了解自己的优势、目标以及工作环境。在考虑全栈之旅时，需要着重思考以下几点。首先是个人优势和偏好，以及对整个技术领域的好奇心。你需要确定自己是否对前端设计的艺术技巧和后端算法的逻辑严谨性都感兴趣，如果你发现开发范围的两端对你都很有吸引力，那么全栈可能是一个正确的选择。其次是适应性及解决问题的心态。行业不断发展，一名全栈开发人员需要具有适应能力，愿意学习和忘却，并在不同的任务和技术之间进行转换。全栈开发人员通常需要解决跨层的问题。如果你喜欢整体解决问题并追根溯源，那么这可能是适合你的道路。第三是职业理想，你是否有创业抱负。如果你渴望创办自己的科技企业或加入初创公司，那么拥有全栈技能将是无价的。它能提供广阔的视野和自力更生的能力，将数字产品变为现实。并且全栈背景可以为技术主管或ＣＴＯ等角色铺平道路，对技术堆栈的全面了解是有益的。当然，你所在企业的属性，对于你是否应该选择全栈之路也将起到重要的影响。初创公司和小公司通常重视全栈开发人员的多功能性。然而大型企业则更希望拥有精通专业技能的角色。虽然协作是每个开发人员生活的一部分，但考虑到全栈开发人员的多方面技能，全栈工程师会发现自己在某些环境中处于更加自主的角色。这可能会影响到你对深度协作的重视程度，并阻碍你对于协作的热情。6、全栈or专业化你可能会发现自己正处于十字路口——追求广阔的全栈还是深入研究专业领域。以下是一些总结性的观点，可以帮助指导你的想法。请记住，科技行业是动态的。就在此时此刻，前端、后端甚至全栈之间的界限正在不断演变。今天的基本技术明天可能就会过时，反之亦然。因此，选择不应仅仅基于市场趋势，而应结合激情、技能和长期目标。在深度和广度之间取得平衡至关重要。虽然全栈开发人员可能拥有广泛的技能，但在职业生涯的某个阶段深入研究特定领域可能是无价的，例如今天的AI。同样，某些特定领域专家也可能会从偶尔拓宽视野中受益。这两条路其实没有优劣之分——关键是要找到与你的目标产生共鸣的节奏。无论你倾向于哪个方向，全栈还是专业化，成功的基石仍然是持续学习。工具、语言和框架可能会发生变化，但以好奇心和适应性为基础的心态将永远是你的北极星。最后，你的职业生涯是非常个人化的。它由你的经验、挑战、成就以及你所创造的的独特价值编织而成。无论你选择全栈、前端、后端或是其他领域，你的选择都会成为自己未来的催化剂。此刻，全栈or专业化？答案就在你自己的内心。
==========第2个回答===========
1 简介我个人整理了全栈开发者路线图目录，并在学习过程中的整理了一些读书笔记、学习心得等资料，希望与大家共同进步。2 目录2.1 HTML2.2 CSS深入了解Sass：提高CSS开发效率的强大工具2.3 JavaScript深入解析ES6：现代JavaScript的崭新篇章深入理解文档对象模型 (DOM)：构建交互性网页的基石探秘浏览器对象模型(BOM)：开启前端世界的大门深入理解客户端存储：Web开发的秘密武器深入了解FetchAPI：现代网络开发的利器2.4 npm深入了解npm：构建 JavaScript 生态系统的利器2.5 gitGit：高效团队协作的利器2.6 GitHub使用GitHub进行协作开发的综合介绍2.7 Tailwind CSS探索Tailwind CSS：简化样式表，提高开发效率2.8 VueVue.js：解锁前端开发的魔力2.9 C＃委托，事件和Lambda表达式异步编程（或多线程编程）2.10 PostgreSQL2.11 REST APIAsp.Net Core WebApi入门如何使用Swagger生成API文档Ocelot一个优秀的.NET API网关框架2.12 JWT AuthIdentityServer4是什么IdentityServer4：客户端凭据模式IdentityServer4：资源所有者密码模式IdentityServer4：授权码模式2.13 Redis使用Redis加速应用程序性能的利器如何使用Redis实现分布式缓存2.14 Linux2.15 基本 AWS 服务Docker一个优秀的应用容器Nginx：高性能的Web服务器与反向代理2.16 监控应用程序2.17 CI/CD2.18 配置管理Apollo：开源的配置中心解决方案2.19 基础设施
==========第3个回答===========
对于全栈工程师来说，往往需要掌握多门编程语言以应对不同的开发场景，当然对于应用场景比较丰富的编程语言来说，也可以做某个编程语言的全栈工程师，比如Python全栈工程师、Java全栈工程师等。全栈工程师比较常见的编程语言包括C、Java、Python、PHP、C#、JavaScript等。数据库是全栈工程师必须掌握的内容之一，随着大数据技术的发展，目前不仅要掌握关系型数据库，还需要掌握NoSql数据库。全栈工程师往往既能够熟练操作数据库，也需要掌握数据库的设计知识，另外还包括数据库的部署、优化等内容。全栈工程师通常要对操作系统体系结构以及相应的开发平台有较为系统的认知，通常Linux操作系统是需要熟练掌握的。开发平台往往根据不同的领域有所区别，比如在大数据领域，Hadoop、Spark就是比较常见的平台，对于全栈工程师来说，掌握多个开发平台的内容也是比较重要的。除了以上内容之外，全栈工程师对于算法设计、计算机网络等内容也要有一个比较全面的了解，尤其是算法设计往往关系到系统的整体性能，是一个重点内容。最后最最重要的，全栈工程师通常也有领域的划分，并不是说全栈工程师就能胜任所有的工作。
==========第1个回答===========
专精技术的性价比不太高了。前端基建也差不多了。 不如专angular+英语。 从市场招聘反应来看，外企还是有需求的，然而能正常英语交流的实在太少了。 同样的这是一条比专精前端或转全栈更困难的道路。因为不局限于技术，而且有跳出代码技术之外的才能，还比较稀缺，所以总体上能延长职业道路。投入大，容易半途而废，风险也高。是最难的一条路。看到IBM中国区裁员了，所以需要补充一下，风险高是指中外脱钩，怕是外企岗位会越来越少。  而海外需求又不得不让人学外语，总的来说多一门技能还是能延长职业寿命。
==========第2个回答===========
当然是往全栈发展了，你以后接单子，你还得懂产品，会设计兄弟，你不会想一辈子打工吧 听哥劝，赶快去写后端去。有时间在学习运营方面的知识
==========第3个回答===========
今年普通前后端太卷了，很多web前端被优化、裁员、降薪，很多时候，投简历完全没有回应。成熟的技术往往会人才过剩，除了卷全栈，也可以选择差异化竞争，选择缺人的新方向，比如web3d可视化。Web3D可视化免费课程( Three.js )Three.js中文网
==========第4个回答===========
做过vue,react，写过组件库可视化搭建工程化，当然都没咋深入，看上去前端就没啥东西了。可以转全栈再转后，掌握业务模型和业务数据最重要
==========第5个回答===========
短期来看，我建议大家确定一个方向，可以追求技术的多样性和广度，但那些都要以你的主方向能学好为前提。贪多嚼不烂，也没必要给自己太大的压力。但长期来看，我认为每个人都应该做全栈程序员！想要成为技术 Leader，你的知识面就要更广，视野和格局才能更大。像我现在的 Leader 就是，前端、后端、算法、产品，都能有自己独特的见解（要不然手下人偷懒忽悠咋办）。当然，这个需要时间去积累，也不用每个方向都学得很深，但多学一点总是好的。
==========第1个回答===========
对于一些没有编程经验的人来说，一开始就学习 web 前端可能会让你觉得比较困难。因为你的能力还处在初始阶段，你根本不知道你缺少哪方面的知识。所以，在正式学习之初，你非常有必要先了解一下前端的能力模型。前端工程师，都需要掌握哪些能力呢？简单粗暴点，只需要掌握这张图里的能力就行了。开个玩笑，新手的话，还是要循序渐进。LV1：学会制作静态页面（Web + Mobile）HTML、HTML5：理解如何浏览和创建网页、基本的语法规范、常用标签及属性、网页之间的链接与跳转、标签节点层级节点。CSS:基本语法和三种书写位置、选择器和格式化排版、盒模型的高级用法、常用布局模型LV2：学会制作动态页面JavaScript ：基础语法和变量、数据类型和数据类型转换、条件判断、循环语句、函数、数组等内置对象（有了这三个，你基本可以写一些简单的页面了，但是仍然需要学一些经典的库和框架。）经典库：比如 jQuery,YUI2,YUI3经典框架：比如 BootstrapLV3：前后端分离，打造 Web AppVue.js/AngularJS2/ReactNode.js，使用 Express/Koa 配合 MongoDB/Redis 涉足到后端领域自动化测试其他：熟悉 Git 与 Shell 的使用学习路径#1.入门 HTML + CSS这里推荐一本书，Head First HTML与CSS（第2版）。从原理到方法都介绍得很详细，通俗易懂，活泼有趣。html和css入门力荐。学完大概 1-2 个周。2.JavaScript + jQueryJS：看 w3school 教程，花 2-3 天，但 w3school 教程有点过时，看完只能了解个基础，深入学习的话，推荐看《JavaScript 权威指南》，《JavaScript 高级程序设计》。两部都是大部头。看完还需要在去网上找 ES6 资料学习，推荐 ECMAScript 6入门，深入浅出ES6。jQuery 的话，去官方文档看即可。熟练掌握大概需要1个月。3.Vue.js/Angular 2/ReactVue.js：查看官方中文文档大约需要 3 天左右。Vue 上手容易，但没有其他前端框架使用基础的人只看官方文档难以理解 Vue 高级用法以及在生产环境中的运用。目前 Vue 社区还比较小，除官方文档外难以找到优秀资料。4.webpack &amp; 测试webpack 是目前应用最广泛的前端模块管理工具，功能强大。测试相关的框架多且杂，大多是社区产物，较难系统学习。以上的这些资源足够你学习几个月的，但它们不会带你走得更远。但是，如果你已经学了这么多，你已经有足够的能力去继续前端的学习，直到你可以完美胜任一个前端工程师的要求。给点小的建议你会经常地遇到 bug 和其它一些问题。这可能会让人沮丧，但你要尽量保持冷静，并系统地去思考。记住实践是解决问题的最佳方法。我们采集的是石头，但是必须时刻展望未来的大教堂。持续做一些小改进，慢慢地你就会惊奇地发现你的经验得到了怎么样的发展，你的技能得到了怎样的提升。我建了一个前端小白交流群，点击下面的官方小卡片复制我的微信号，添加进入交流群。我会给大家分享我收集整理的各种学习资料，组织大家一起做项目练习，帮助大家匹配一位学习伙伴互相监督学习，欢迎加入。知乎营销平台
==========第2个回答===========
对于工作经验一两年以内的求职者而言，申明自己是全栈，甚至是扣分项。我自己是前端，帮公司面试过不少求职者，很多人简历上会写一些后端技术。简历上写了我就问，但基本回答都惨不忍睹。当然，面试的时候，本就没对一个初级前端的后端技术有什么要求，但面试不是做卷子按得分点拿分，很看综合感觉，答不上的问题多了，感觉自然就下去了。对于应届生，前后端都可以，但除非是真大佬，全栈不推荐。
==========第3个回答===========
对于零基础入行IT，比如是应届生找IT工作，或者是零项目经验想培训班入行IT，大概率是后端好找工作，而且最好不是光后端，最好不仅会spring boot，再带些redis等分布式组件。先排除全栈，原因好理解，零基础入行IT，优先是需要证明真实项目经验，哪怕是校招这种不强制需要项目经验的场景，如果能在简历和面试中证明自己有真实项目经验，这也是大占优势。问题是不少零基础入行找工作的朋友，本身根本没有项目经验，是靠包装学习项目甚至是脑补一个项目去找工作，其实这样做也能找到工作，只要你的简历上的项目让人看上去像真实项目，然后面试时能通过项目细节和项目技术让面试官相信即可。但问题就出在这里，通过包装准备全栈真实项目的难度相比单纯包装后端项目，难度其实是dubbo。比如面试官在确认全栈项目经验是，一定会问，你前端vue等技术或后端spring boot怎么用到项目里，而且前后端真实项目的开发测试模式和学习过程中是不一样的。所以对不少零基础求职者来说，通过包装准备个后端项目说辞就有些勉强，更何况再要加上前端的相关说辞就更难了。再说了，很多公司在招初级开发的时候一般只要求是能做后端即可，所以如果初学者学个全栈，不仅学习难度变大，找工作时准备项目说辞时遇到的面试官挑战也会更大，但实际上对找到工作的加分帮助并不大，这属于性价比不高的事情。而且话可以这样说，哪怕初学者在找工作时学有余力，更可以进一步准备后端分布式组件这块的技能和说辞，而不必再去走全栈路线。再比较前端和后端找工作的难度，零前端项目经验的求职者找工作，难度普遍大于后端，原因有两，第一面向初级前端的开发岗位数量较少，一般是少于后端，第二是要上手前端的初级开发活，需要的初始化技能普遍难于后端或其它岗位。对此本人还专门写过篇文章讲这个情况。打算去培训前端，据说好多培训完找不到工作的，是真的吗？ 而且当下，大学里讲的后端课程，好歹还能提及spring boot做增删改查，这多少和找工作所需要的技能有些关系，但前端课程一般仅限于html5外带css，实际上前端找工作更需要vue等框架，这方面的课程不少学校是没有开的。从上文里大家其实能看到，零项目经验或者零基础入行IT，其实后端更好找工作，再具体其实是java后端更好找。这里顺带提些其他语言，比如python是偏向做数据分析的，c++,c#和go，职位一般没java多，所以其实当下从后端入行IT，一般还真得从java以及spring boot入手。在这过程中，可能依然得证明真实项目经验，依然得结合项目说技术，依然得背八股文，但可能论学习的点来说，要少于全栈，论工作机会，是要多余前端。另外再用本人切身体验来说，本人在上海一个软件园周末兼职讲课，受众是这个软件园内部公司的新入职员工，有些类似于岗前培训外加新手入行培训，这个过程中，参加java后端培训的人数是远超前端，甚至是多于python等语言的，从中大家能看到如下的情况。1 哪怕是只会后端，依然能入行IT，当然通过前端入行IT也有，但可能前端工作岗位没后端多。2 初学者在入行乃至成为熟手阶段，哪怕是能在真实项目里提升，但一般只是偏重后端或前端一个方面，能做到全栈开发的不多，更何况在没入行前的学习阶段，能把后端或前端技术学好，且能过面试，这就不容易了，而真正能在学习阶段能学好全栈技能且能过面试，这种情况不多。所以如果是零基础想入行IT，别认为全栈由于多掌握技术，所以好找工作，事实上通过后端入行的难度是普遍低于全栈以及前端的。不过零项目经验，或者是中途转行，想通过后端入行，这只是相对于全栈或前端容易，但本身的难度未必能说是轻而易举。对此本人也有如下的文章讲述零基础如何通过java后端入行，由于这和主题无关，所以只列文章，不再进一步说明。老胡聊Java：23年，在Java行情一般的情况下，说说通过自学找java工作的操作要点6-8k 的 java 秋招 (不是大厂) 需要什么技术?
==========第4个回答===========
现在越大的企业岗位划分越精细化，基本上只有中小企业有全栈类型。计算机本科的同学，不必过分追求全栈：找对方向—准备项目—校招面试—就业积累经验—专精—全栈—向上发展。先来看一张IT技术相关就业图：一、前端or后端前端：这两年前端工作者应该最有感触，变化太快了！而且早就不是会切图+HTML+CSS+JS就能通吃的时代了。目前主流的框架Vue、React和Angular。光会框架是不行的，校招面试的时候面试官必问每个环节的内部机制和原理。---------- - - -- - - - -   ↓↓前端就业包↓↓为什么那么多自学 WEB 前端的人后来都放弃了?后端：题主掌握的只能说是基础内容，毕竟框架都没用过。而且基于JSP的Servlet和Javaweb是最基础的必备技能了。多种服务器整合、集群和负载均衡配置也是需要掌握的。---------- - - -- - - - -   ↓↓后端就业包↓↓在培训班学习4个月的Java后能找到工作吗？尽量找到自己的兴趣所在吧，看看自己更喜欢做什么岗位。现在想还来得及，做好准备之后就开始准备一个项目。二、校招必问项目原本我给计算机的同学们学习的建议是这样的：计算机专业大学生应该在大学四年踏实学哪些东西?理想的时间节点是大一学期下就确认了自己今后的岗位发展方向，朝着这个方向学习。但是已经大三大四觉得来不及的同学们也不用担心。从下面项目中找一个准备。三、项目学习内容先送大家黑马程序员6大行业项目实战：医疗《传智健康》 | 《品优购》电商项目 | 《SaaSiHRM》企业服务项目《好客租房》生活服务 | 《万信金融》金融行业项目 | 《聚合支付》支付工具 下面简单的说一些Java学习项目到底要学一些什么，想看详细内容的戳这里&gt;&gt;学完Java，要出去工作了，没有项目经验怎么办？ 以我们的项目《好客租房》来说，技术解决方案有：毕设+论文的方法：计算机专业学生什么都不会毕业设计怎么办？上文出现的毕设是以前端+后端+云部署的【黑马智慧物业毕设】~四、对应届生来说什么更重要？前两天刚好看到一个问题，一个应届实习生的总监给他说：“算法和数据结构根本没有那么重要，实际工作经验更重要”。他就慌乱了，为什么知乎那么多大神说【数据结构和算法】很重要嗯？其实大家要结合自己的实际情况来说，如果你在大学阶段学好了数据结构和算法是对你未来的进阶很有帮助，甚至是对面试有加分。但是既然没学好，已经实习了，当然是实际工作的经验和解决问题的经验更重要啊。针对题主也是一样的，前端、后端都可以，也不是重点。以题主为鉴，希望各位科班同学万丈高楼平地起，勿在浮沙筑高台。
==========第5个回答===========
前端易入门，难精通，市场需求量大后端难入门，难精通，市场需求因语言框架不同而变化，待遇高全栈，易入门难精通，非一线城市需求量大待遇高。一线城市要求一专多能
==========第1个回答===========
flutter+react+golang+mysql＝frgm1，flutter，性能高，多平台ui一致，难逆向，一次出4端，ios，Android，pc，tv，实在插件不够用再学原生补给，不会dart的人，dart语法跟js ts 95%相似5天就转过去，框架用法与react类组件98%相似2，react负责后台管理系统或者其他对外页面需求，配合material ui+mbox+swc+wasm+ts，别用redux，redux费力不讨好，你还得为了ts单独自己写interface，别用umi，umi绑定了太多依赖库，拖家带口一大堆，虽然可以一个个卸载掉，但是图啥呢，他所谓的亮点支持mfsu现实中并没有多么好的效果。还有不少第三方库没给umi写插件，你自己写还得找不同版本的教程，umi版本太多了文档那个乱啊别用next，既然未来直接上cdn，那还用next意义就不大了，除非大量ssr，不要为了一两个页面需要seo就上next，为了一口醋包顿饺子。而且上了next并发量一下子就下来了，哪怕你缓存。就单纯用基础react最干净，最简洁，可以模拟umi自己写一个可配置式路由。然后配置好swc起飞。如果想解决seo问题，可以使用预渲染技术把某个react路由单独生成静态文件上cdn或者没钱cdn直接nginx静态转发也行。总之就是尽量服务器端去nodejs化。服务器越来越贵，性能低的比如node，占内存的比如java，等这些语言通通不要留，只留go/rust/c/cpp这类。（原谅我穷人思想）别问我为什么不是vue，因为我觉得vue太啰嗦了3，go+gin一步到位高性能简洁快速，一言不合就可以开协程。golang结构体可以直接导出swagger进而导出前端的interface，完美组合。不要走某公司先python再用golang重构的老路，go开发速度不比python慢4，mysql简单好用，别用mongo，还是关系型数据库更加规范，约束更多，mongo内置约束太少了，像我这样的新手很难驾驭好我说的是你如果创业的话，可以这么组合，如果打工，那么公司用啥你就用啥，毕竟给你工作开工资，比失业强。以上是失业半年至今总结的，我做梦幻想着如果有一天我有钱创业了，我就这么干。是的，没钱创什么业。最后，赏个star吧https://github.com/butoften/array完美失业中，做个工具站https://tool.butof.com/前端朋友们估计会用的比较多的就是转webp了，记得在电脑上使用哦，不限体积，不限数量，多worker复用https://tool.butof.com/office/webp
==========第2个回答===========
你们三个人全去送外卖，赚钱回来买淘宝app大作业代做都比你们三个自学成功率高，除非你创业是假，练习编程是真。
==========第3个回答===========
前端：react，使用 tailwind css + shadcn ui 后端：fast api （非常适合搞 ai 的老铁们， 用python 效率爆表，而且 fast api 也可以scale）。在 aws 上部署，也可以用他们的 serverless那套，lambda，s3 存储等。 用户多了可以加 redis，kafka 之类的，看具体需求。大数据：spark 生态，k8s 在 aws 部署。总之react + fast api 为前后端核心就是非常爽，一个人最快一两天能撸出来一个完整应用。
==========第4个回答===========
别听其他博主瞎说，等你们学完那些一年半载都过去了。2023年，版本应该更新了。下面是我研究出了最快通关法则：GPT+阿里云服务器（宝塔版）+github python project+阿里函数计算（FC）。这是目前可以想到的效率最快的实现路线了。如果你运气好，可以全程不用敲一行代码。1.宝塔搜索商城，查看一键部署，有没有满意的，（记得开启七牛，火山同步）。2.github搜索相关project。然后按照教程部署上去。3.遇到个别要自己实现的逻辑，使用FC(python)或者百度云函数(lua)来完成（记得问问gpt)，然后提供API给应用。4.界面用开源模板就可以了。放心，质量比99%的人写的还要好。然后用GPT来辅助微调。然后记得静态页面放七牛上。我大二的时候参加忽悠网+，用宝塔一键搭建主页，然后用函数计算+mysql实现用户管理系统，然后再使用python的opencv和开源代码组合成了核心服务，用FC提供给前端。整个流程下来敲的代码屈指可数(主要是函数计算部分，不过因为不用触碰到网关部分，所以还是很轻松的。)，用函数计算实现基本的用户管理系统代码我开源在了gitee上(即注册，登录，改密，修改昵称，获取token,校验token等一系列基本函数)。不过现在阿里云官方也提供了对应模板，你可以直接使用。当然在PPT里面你要写:本项目使用了微服务架构，充分保障了高并发和极限情况下的用户使用体验，不再担心崩溃情况。(阿里说顺手的事)利用了云弹性功能节约了计算机使用成本，提高了效率。（主要是FC便宜）存储服务使用了多路CDN策略，让资源离用户更近一步，快到无极限！（这个更好了，还不用钱，一个月就有2*10G.）安全更是我们的重中之重，全新架构轻松抵御各种木马，我们细心用各种密码学知识为隐私加锁。（废话，serverless怎么会存在服务器入侵行为。记得把宝塔申请下来的let&#39;s encrypt证书复制到七牛云里面，开启https模式。）
==========第5个回答===========
花钱找人写个前端性价比最高还是那点建议据我所知，所有新公司搞微服务的，基本都是亏本的。创业不要一开始就老想着微服务，k8s,用nodejs做中间层做ssr渲染，专门建台redis，kafka服务器，永远记住，技术是次要的，你以为很高大上的技术，谷歌这些大公司已经做过几千遍了，以及各种安全验证，都是很费时费力的，直接撸个简单的样子就行了，要把目标放在投资或盈利上。不然最后没钱支撑项目，人又招不到，压力又大
==========第1个回答===========
我从来没想过题主的问题，但是事实上，在入行18年后，我现在身不由己的发展成了全栈程序猿，核心算法，消息队列机制，数据流，界面，服务，部署，数据库，Docker，多进程优化，分布式计算都得一个人操心。原因很简单——我没有爬进一个大厂去当螺丝钉，工作内容不直接开发岗位，写程序纯粹是做一个自由自在的Freelancer。至于题主居然认为需要同事关系的程序猿才能够团队协作？你是假的程序猿吧，程序猿的团队协作靠Git和GayHub啊。而且还有低配版的更松散的团队协作形式，yum, pip 和 conda install 
==========第2个回答===========
一专多能最好。人的精力是有限的，不排除少数天才能专精多个领域，但大多数人能深耕一个领域中的一个技术方向就已经很不容易了。除了极少数在培训班学了两个月就自称「全栈工程师」的人之外，我们工作中遇到的「真正」全栈绝大多数要么是学会了写后端服务的前端工程师，要么就是学了做网站和APP的服务器工程师。也就是说，大部分全栈工程师原本是有一个专精领域之后在工作中又接触并熟悉了其他领域的，而不是一开始就朝着「全栈」这个方向去打造自己的。前端和后端实际是两个完全不同的技术方向，尽管有node这种用js语法写后端的技术存在，但前后端的差异可远不止语法这么简单。随着现在框架和入门教程的丰富，想在几天内就上手一门新语言的语法其实不难，难的是适应这种语言本身的思维方式，还有在实践中使用各种库与框架的熟练程度。一个经验丰富的后端程序员兼通PHP、Python、Java和C#其实并没有那么难，但如果换成Web前端、服务器、iOS和Android这四种，想达到和前面四种同级的熟练度难度简直要往上翻几倍甚至十几倍了。全栈工程师适用下面这些场合：个人项目或创业公司，刚起步，团队小，一个人可以把产品打造出可用的雏形；作为精通前后端多个领域的工程师，在团队中任何开发角色都能够即插即用；作为团队Leader，掌控开发方向，编写核心代码，同时能指导其他人的工作。除此之外就不该提更高要求了。尽管全栈工程师熟悉多种语言和开发工具，但人毕竟是单线程生物，就算会干很多种事情，也不可能同时干很多种事情。如果老板希望招一个全栈来代替一个前端加一个后端，人虽然少了，但开发时间还是要两倍……尽管全栈不是万能的，而且同时学多个方向的技术也相对困难些，但我还是推荐程序员不要始终待在舒适区里、抱着熟悉多年的语言和库不撒手。毕竟行业变化这么快，五年前很多今天的概念还没出现，五年后现在的一些热门都消失了。不是每个人都需要成为全栈，但在拥有一个精通领域的同时对周边技术感兴趣并乐于尝试，对程序员的职业生涯绝对是十分有利的。
==========第3个回答===========
先说在前头，专精在大公司好找工作，全栈在创业公司好找工作，题主有这样的疑惑恐怕就是担心在大公司上升空间不足，想去创业公司自身技能广度又不足。然而只要你不是天才，又不是工作数十年的老手，这样二选一的抉择是不可逃避的。全栈是充分条件但不是必要条件，在什么环境培养出什么样的技术。大团队事事有人负责那显然只需要专精一项，没人会欣赏你是否全栈。小团队人手不足，需要身兼多职，做着做着就发觉自己全栈了，而且在公司发展初期更需要的是做出来而不是做得特别好，专精一项的能力往往容易被忽略。何况专精和全栈本身并不矛盾，如果你是一个好学的人，事业发展到最后必然是专精某几项，熟悉很多项。但是在工作初期就需要选择了，所以良好的职业规划必不可少。我建议先向某个方向专精，在工作的同时涉猎其他领域的知识，由专精的知识向外发散，不时回头巩固专精方向的知识。就是一个 专精-全栈-专精-全栈的循环。多说一句，我觉得全栈这个概念就是近两年创业热潮里给造出来的，为啥感觉现在要全栈的这么多，就是创业团队多啊，以前难道没有么？应该也有，就是不受重视而已
==========第4个回答===========
我一个远房亲戚家孩子今年上大学，已经立志做资深程序员，说穷人家的孩子趁着年轻，就要进军互联网，虽然经常996，但只要肯奋斗，程序员就是能够实现快速积累家底的有效途径。这话是有道理，我劝孩子千万别想不开，得慎重。程序员，用脑多，压力大，作息混乱，再加上你经常分泌的雄性激素.....这不是和头发作对嘛。这个小孩是个很有想法的小孩，确定志向后就来咨询我相关的问题，就问到这个问题，程序员，是专注于一个领域好呢，还是要尽量全能呢。其实这个问题就跟咱这个提问者一个意思了，是专注于一个领域有前途呢，还是全栈程序员有前途呢？首先，咱说说啥叫全栈程序员，全栈程序员其实就是技术多面手，能独立完成non-trivial application的人。也就是说，能独立完成具有一定复杂度和规模的技术工作的人。那么通俗来讲，全栈程序员就是运动员中的五项全能运动员，在各个领域都能做的出色的工程师。这可真是难上加难，要知道，互联网发展极其快速，在这样信息高速迭代的社会里，你在一个领域里做到出色都难，怎么做到样样优秀？注意，不是样样都会，而是样样优秀，你说菲尔普斯用四种游泳姿势都拿了奥运冠军那叫全能，你一个20岁的人连着狗刨用五种游泳姿势游了200米你说我比菲尔普斯还多会一种，那叫全能吗？总而言之，一个全栈工程师要求是蛮高的，在语言层面对汇编、C、C++、Lisp、Java、Python、Lua 都有深入的理解，能够连接前后端的架构设计，你可以看看有些招聘网站上的要求，熟悉web前段开发、小程序开发、后端开发等等，一个人得包前揽后的......然而事实上，早期的程序员基本都是全栈。比如我来引用以下一位池前辈的经历：2001年左右我们开发 B/S 产品，用来展现 UI 和 数据的程序代码中混杂了 Java、HTML、CSS 和 JavaScript，根本不可能把前端和后端拆开编写，而后端业务逻辑本身就是 Java 实现的，你不写谁写？懂了业务逻辑和算法还不行，你得把数据存数据库和文件系统吧，什么？你不懂 SQL？我靠那你还是程序员吗？你不能每次和数据库交互都让一个进程去敲门吧，数据库招你惹你了？这时候就得有个连接线程池。异常得统一处理吧，得支持集群吧，给用户部署了得能自动扩展吧，没测试怎么办？你自己写的代码写的业务逻辑写的界面，你不保证正确性谁保证？太真实了，其实前期的程序员什么都会一些，有些小问题都能解决，但是并不出色，我们也可以称之为“全沾程序员”吧.......其实现在一些小公司也招这种全能程序员，省钱嘛，一个人啥活都能干，也有一些真正要招全栈程序员的，这就非常高大上了，主要就是找一个精通前后端的人才总览大局，就非常牛逼了。个人看法，全栈程序员的快速学习能力和勤奋程度是一般人望尘莫及的。而且，成为全栈程序员并非想象中那种前后端一起入手，眉毛胡子一把抓，而是应该从一个领域入手，你先找到自己感兴趣的领域，并在这个领域钻研几年，然后你再扩大自己的知识层面，当你发现我扩展的领域也精通的时候，才是全栈程序员的水平。所以，我认为现在没必要想什么更有前途，我也这么给这孩儿说的。如果你是刚刚入门的程序员，那么建议你还是先夯实基础，在你感兴趣的领域尽情发挥吧，不用刻意追求大而全，因为功到垂成，如果你有能力做全栈，那就是自然而然的事情。目前还是要积累经验、并且锻炼快速学习的能力、勤奋刻苦。如果你是面临着深入还是全栈这个临界点，那首先我恭喜你，能走到这个临界点的人都很少，因为这说明你至少在某一方面非常出色，你如果有能力也有野心，我很支持做全栈，因为一门考100和门门考100，后者挑战性大，包括在这个过程中你受到的锻炼和发掘自己的可能性更大。但如果你觉得，我现在很爱我做的领域，不想变动了，那就努力做这个领域最优秀的人吧！
==========第5个回答===========
首先，会很多领域，每个领域都100分，这种人是天才，可能一万个人当中不会有一个。但如果说，熟练掌握多个领域的技术，但达不到100分，这种人到处都是。（我就是）一项一项说：平面设计。不懂创意，但能熟练的裁图、切图、改颜色、改位置、改线条、改比例、改透明、能做基本的矢量图、能在不同软件之间互相导入导出图形。网页设计。H5、CCS3能熟练掌握，但有些技巧需要面向面百度编程。前端技术。熟练掌握原生JS、jQuery，能使用（看懂并修改）vue、layui等简单的前端框架。后端技术。熟练地用ruby/rails、PHP、java/tomcat实现后端API。MySQL数据库玩熟练那是基本操作。操作系统。ubuntu/cenos基本使用技能，能自己全新搭建自己所需要的开发环境和项目运行环境（LAMP、ruby/rails、nginx、apache、tomcat等）PC端。熟练使用各种C++开发环境，包括MS的、open source的，各种库、SDK、IDE、tool chain。项目管理的。搭建Jenkins持续集成环境并为之写脚本，那是基本操作。用上一两个测试框架并放到Jenkins中进行自动测试，管理测试脚本。各种开发工具。不说了，太多了。硬件开发。简单的MCU电路、画原理图、layout、会使用基本的仪器仪表，理解模电数电，理解信号质量和EMI，理解高频和射频特性。会看芯片的datasheet，能掌握芯片的软件接口（各种寄存器的使用）各位，以上叫全栈吗？正如题主所说的，个人是完全没办法完成一个从前端到电路一个完整项目的开发。但是，以上我能看得懂，我知道你说什么，我知道我应该关注的重点，我知道各子系统之间的边界和职责分配，知道什么是合理的设计原则和机制。出问题了我知道大概应该从哪里入手，我懂得设计合理的log使得问题更容易定位。那么，这个是全栈吗？工作中我更愿意用另一个名称“系统工程师”或“系统架构师”来称呼。
==========第1个回答===========
IT行业之外的人其实很难理解Web开发是多么复杂的工程。人们一般认为，在计算机公司或者互联网公司工作的人，就应该能够解决与计算机相关的所有问题：电脑开不了机、应该买什么型号的手机、家里上不了网，等等。在他们眼中，计算机行业的从业者天生就带有“全栈光环”。但是你知道，要开发一个Web页面，工程师需要掌握的知识至少包括：服务器、数据库、服务器端编程语言、前端标记语言和脚本语言（HTML、CSS、JavaScript）等。这些技术中的每一个，都需要几年的学习和练习才能达到精通的程度。Web工程是一个如此大的专业类别，以至于IT公司为每一个环节都设置了专门的部门和岗位，来把每一个环节做好。服务器、数据库、服务器端编程语言、HTML、CSS、JavaScript等组合在一起就是一个“栈”。这个“栈”是用来制作Web站点的，所以又叫Web栈（Web-Stack）。如果要开发一个在手机中运行的应用，开发者需要的知识包括：服务器、数据库、服务器端编程语言、iOS或者Android开发技术。这些技术的集合称为App栈（App-Stack）。“全栈”表示为了完成一个项目，所需要的一系列技术的集合。“栈”是指一系列子模块的集合。全栈工程师（Full-Stack Engineer），也叫全端工程师，指的是掌握多种技能，对前端知识和后端架构都有深入的了解，并拥有足够的学习能力，能利用多种技能解决问题，独立完成产品的人。全栈工程师熟悉多种开发语言，同时具备前端和后台开发能力，从需求分析，原型设计到产品开发，测试，部署，发布全流程都十分熟悉。所以经常有人调侃到全栈工程师就是全干工程师，你什么都需要会。全栈工程师更倾向于Web的独立开发，一个人跑Web的前后端项目包括了部署、测试、维护等，不过现在主要可以独立做前后端的工程师也称为全栈工程师。第一个是编程语言你得先要精通多种编程语言，例如JAVA，Go，JavaScript，Python等。因为大多数核心业务流程都需要用这些语言编写。但你不但掌握语言语法，并且非常熟悉如何基于一种或多种语言对项目进行结构，设计，实现和测试。例如，如果选择JAVA，那么你需要掌握面向对象的设计和开发，设计模式，基于J2EE的开发组件等。第二个是后端框架，使用开发框架和第三方库流行的开发语言通常伴随着一个良好的开发框架，如JAVA Spring，MyBatis，Hibernate，Koa，nodeJs express ，go的gin，beego等。第三个是前端技术在现在的项目和产品开发中，前端技术变得越来越重要。除产品功能外，用户体验也是测试产品成功率的标准之一。所有这些都取决于前端技术的实现，需要掌握一些基本的前端技术，如HTML5，CSS3，JavaScript，并进一步研究前端框架或第三方库，如JQuery，LESS， SASS，AngularJS或REACT。尤其是现在流行的前端三大框架Vue、React和Angular是非常有必要学会的，国内很多开发工具都是基于Vue和React写的，基本上学过以后更容易上手。第四个数据库和缓存任何产品或项目都需要数据库来存储数据。作为一个全栈工程师，还需要至少有一个或两个数据库，并知道如何与数据库进行交互。目前，流行的数据库是MySQL，MongoDB，Redis，Oracle，SQLServer等。作为文档类型的数据库，MongoDB在Internet产品中得到了更广泛的应用。对于较大的项目，建议使用MySQL或商业Oracle作为后端数据库。而内存数据库（如Redis）可用于缓存以提高系统性能。全栈工程师的好处就是，参与了横向技术要求，所以可以使用各种技术快速的进行产品原型设计，有更广泛的视角和更积极的思维模式。而且，他们对技术和产品更敏感。所以，这种人总能对产品或设计有自己的看法。而且，还可以为团队中的每个人提供帮助，并大大减少团队沟通，技术对接的时间和技术成本。但是会有人什么都精通吗？有是有，但不是每个人都会全栈，就算是会也不会精通。因为技术的成长是要靠经验的累积，说白了就是熬时间，三五年的程序员说自己全栈，这个只能说全栈的也是皮毛。要想成为一名真正优秀的全栈工程师，学习无疑是最需要做的。从前端的HTML/CSS、JavaScript、Ajax和JSON到后端的Node.js、Python、Java、PHP以及数据库 和 Web 存储等知识都是需要学习的。只有在某一领域深入研究，同时可以在其它方面快速上手，从全局解决问题，才能成为一位真正的全栈工程师。
==========第2个回答===========
全栈工程师其实就是同时拥有前端开发技术及后端开发技术的人，他们既能写前端代码，也能写后端代码，能够独立完成前后台的搭建。具体需要具备以下技能。1、HTML5+CSS3HTML5是开放的Web网络平台的奠基石，CSS3原理同CSS，是在网页中自定义样式表的选择符，然后在网页中大量引用这些选择符。对一名全栈工程师来说，HTML5+CSS3的掌握是工作的基础，最主要需要掌握的就是HTML5相关基础知识、HTML5 语法及使用技巧、HTML5 常用标签等相关内容以及 CSS 语法及使用技巧等。2、JS交互设计JS即Javascript，就是适应动态网页制作的需要而诞生的一种新的编程语言，如今越来越广泛地使用于Internet网页制作上。JS 能够使原先纯展示的页面增加动态效果，全栈工程师需要掌握JavaScript基础语法、进阶以及高级编程。3、Node开发Node 是一个让 JavaScript 运行在服务端的开发平台，用于方便地搭建响应速度快、易于扩展的网络应用。一名全栈工程师需要能够使用 Node.js 进行 Web 服务端开发以及使用 Node.js 操作 MongoDB 数据库，Node是新兴的一个前端框架，有很多吸引人的地方，全栈工程师还可以使用它来开发一些快速移动Web框架。4、前端框架前端框架主要是提高前端开发效率，降低开发难度。它其实是一套解决方案，就是按固定的规则来安排代码结构，有了框架，前端开发能够事半功倍，所以说全栈工程师是要会使用这些前端框架的，比如最基本的Vue框架、React框架、Angular框架等。5、小程序与APP开发小程序是一种依托于微信的应用，而APP是一种技术，依托于浏览器存在。小程序背靠微信，流量大，受众多，一度刷爆互联网，而APP是随着智能手机的发展应运而生的，为广大用户带来了很多便捷，这两种技术目前来说相对火热，同时也是一名合格的全栈工程师必须掌握的。
==========第3个回答===========
全栈开发者就是指能够独立完成一个完整软件应用程序开发的人员，包括前端、后端、数据库、服务器等所有环节。对于企业来说，全栈开发不仅能提高开发效率，还能降低成本，所以近些年来己经成为一种行业趋势。但同时它也具有学习难度大，工作压力大等特点，开发者须要具备相应的技术能力和心理素质才能平稳面对这一严峻的挑战。特别是近年有很多出海的独立开发者，他们大部分都是全栈程序员。我只说说大家没说过的，我认为全栈开发者还必须要有一个重要的技能就是会用工具，人卷人卷死人，所以要学会用工具去卷，不然谁受得了。我推荐一些自用的工具，看看能不能帮到大家吧。资深全栈工程师的自用工具集合包：1. 代码编辑器/IDEVisual Studio Code ：微软出品的免费开源代码编辑器，支持多种编程语言，拥有丰富的插件和扩展，功能强大，可满足不同开发需求。IntelliJ IDEA ：JetBrains 开发的付费 IDE，支持多种编程语言，拥有智能代码补全、错误检查、重构等功能，可提高开发效率。2. 构建工具Vite：由 Vue 团队创建的前端构建工具，旨在提高前端开发的效率和性能。Vite 采用了全新的构建模式，无需复杂的配置即可满足大多数项目的开发需求。Webpack ：最流行的 JavaScript 模块打包工具，可以将多个 JavaScript 文件打包成一个文件，并支持各种模块化方案，如 CommonJS、ES6 模块等。Rollup ：另一个流行的 JavaScript 模块打包工具，具有体积小、速度快等特点，适用于构建大型项目。Parcel ：零配置的 JavaScript 构建工具，可以自动识别文件类型，并进行打包、压缩等操作，使用简单方便。3. 测试框架Mocha ：流行的 JavaScript 测试框架，可以方便地编写和执行单元测试，并支持多种测试断言库。Jest ：Facebook 开发的 JavaScript 测试框架，具有易用、快速等特点，支持快照测试、覆盖率统计等功能。Jasmine ：行为驱动开发 (BDD) 风格的 JavaScript 测试框架，语法简洁易懂，易于上手。4. 调试工具Chrome DevTools ：Chrome 浏览器内置的调试工具，可以查看代码执行过程、设置断点、查看网络请求等，功能强大。Firefox DevTools ：Firefox 浏览器内置的调试工具，功能类似于 Chrome DevTools，也支持多种调试功能。Safari DevTools：Safari 浏览器内置的调试工具，功能类似于 Chrome DevTools 和 Firefox DevTools，可用于调试 WebKit 内核的网页。5. 版本控制工具Git ：最流行的分布式版本控制系统，可以跟踪代码变更、管理代码版本，支持分支管理、协作开发等功能。GitHub ：基于 Git 的代码托管平台，可以将代码托管到远程仓库，方便地进行代码分享、协作开发。Bitbucket ：另一个流行的代码托管平台，功能类似于 GitHub，也支持私有仓库、团队协作等功能。6. 开发环境管理工具ServBay：一款专为macOS设计的本地Web开发环境，集成了最流行的Caddy服务器，MariaDB和PostgreSQL数据库，Redis、Memcached等NoSQL数据库，还有phpMyAdmin、adminer等数据库管理工具XAMPP：是一个跨平台的解决方案，支持Windows、Linux、Mac OS X等操作系统。它集成了Apache服务器、MySQL数据库、PHP和Perl等工具。7. 数据库/服务器管理工具MySQL Workbench：MySQL 官方出品的数据库管理工具，可以用于创建数据库表、插入数据、查询数据等，功能强大。PostgreSQL pgAdmin ：PostgreSQL 数据库的图形化管理工具，可以用于管理 PostgreSQL 数据库，提供丰富的管理功能。PuTTY ：免费的 SSH 客户端工具，支持 Windows、Linux 等操作系统，可以用于连接远程服务器。俗话说“工具选的好，晚上下班早”，希望大家能找到最适合自己的工具，真正实现高效开发。
==========第4个回答===========
个人理解全栈工程师是从产品设计到前后端开发到测试再到运维，一个人能完整的交付产品和运维。是否全栈看在什么公司，小公司和自己创业适合全栈，减少沟通成本，节省人力成本。大公司没必要全栈，也全栈不了。小公司业务量不多的话其实很适合全栈的，就是人难招。创业小规模验证商业模式也很适合全栈。前端学一下java，spring稍微有点困难，后端认真学一下css，angular，typescript，flutter ，dart开发个前端web和app不难啊。创业公司前景不明朗，又没有融到资金，你还来一整套的人马，风险很高好不？如果公司商业模式对流量有要求，那是必须融资才能成功，也可以分散风险。后台对并发量有要求，哪后台得仔细考量伸缩性扩展性，需要一位比较好的后台开发。如果立志于大公司发展，找个方向深入研究，分布式、前端、人工智能、大数据都可以，没必要全栈，也全栈不了。如果自己有创业的想法，学一下也没坏处，重点后端，其它可以不用学那么深。
==========第5个回答===========
前后端编码，运维，测试，部署等
